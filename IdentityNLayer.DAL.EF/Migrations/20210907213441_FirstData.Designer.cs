// <auto-generated />
using System;
using IdentityNLayer.DAL.EF.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IdentityNLayer.DAL.EF.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210907213441_FirstData")]
    partial class FirstData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Program")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Super MVC",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "ASP",
                            TopicId = 1,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Description = "Super Spring",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Java",
                            TopicId = 2,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Description = "Super JavaScript",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "JavaScript",
                            TopicId = 3,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityID")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserID");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.StudentToGroupAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentToGroupActions");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkToProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Description = "Super MVC",
                            Title = ".NET"
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            Description = "Super Spring",
                            Title = "Spring"
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 3,
                            Description = "Super ReactJS",
                            Title = "ReactJS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "8c7c8095-2336-43b3-9494-1828cec9924f",
                            ConcurrencyStamp = "a6bfc6ba-a913-4eec-ba75-c0f93ee517d6",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "69ee48cd-e2e2-4632-941b-77744320a070",
                            ConcurrencyStamp = "a504955e-c44f-439f-81a1-246f70f3b715",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "93a14dc9-a206-4b15-98d8-6e52f32616f4",
                            ConcurrencyStamp = "9de2ea9f-4558-4581-9e1b-e838e72b038e",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "5f567727-6f15-4e9d-99da-98a00f365f94",
                            ConcurrencyStamp = "7b8a585f-a9a5-47ef-b77f-f313851bdedb",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "a7504080-eb7c-452c-b703-72f7fc747273",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "833ea57a-3bfa-4406-ae3e-f7bcc69d91b8",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIfJ0yai7QhVQryUH/IxZo/AxrQ61KHyY6MXM3vbQy9c7f3VrPpKeVjXAujYUEoC4g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3ba542ab-c979-45c5-8ba3-0be099869d64",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "8e1cff68-a820-4bc9-8569-d074545d2f4d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a82f25b3-1a72-4788-9bc1-37b22ffc7cfb",
                            Email = "manager@manager.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "MANAGER@MANAGER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHH6pj7jKPNeUM4gAJzxpiTssbO3frzDQynUGXQzLJSbCF4i13fUW8Co+TDliz5UxQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "13ce17e0-99b7-4a46-bbe2-5659402d40ae",
                            TwoFactorEnabled = false,
                            UserName = "manager@manager.com"
                        },
                        new
                        {
                            Id = "ac3f39a1-98aa-4db4-92fc-7b4e2bf33a88",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b3ccda03-74a9-45e1-9584-933c2c1c5f6c",
                            Email = "guest1@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest1@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKML2avxRsjBMpHQDwDsfHF1fH1PNE3tGLlsLi4kOIy7KGSjnCJ5LQEJyC6cztbTOg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "75aa0d40-c7ab-4f30-93d0-bb81d3f1ce8c",
                            TwoFactorEnabled = false,
                            UserName = "guest1@mail.com"
                        },
                        new
                        {
                            Id = "03c7522d-4fb9-44ca-95a3-5941e872dbe7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4b556c93-d887-4272-8dac-6263da98501b",
                            Email = "guest2@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest2@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENjkOBZRxXHDO6C2F0yzzADuaeapuZI0kbHVatSFWcussqR2QkZQgfu1ebfDN15pDg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4643ff9e-cb1b-451e-be2c-1259865960e8",
                            TwoFactorEnabled = false,
                            UserName = "guest2@mail.com"
                        },
                        new
                        {
                            Id = "c3dafc38-6e05-46a1-8673-b1cbf66bddf1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "563d98a6-0c0c-4672-b4ca-23763aaa8aa7",
                            Email = "guest3@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest3@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENX5qI2b7EeJQLieeLzNOajMmtUysWS0dRkdbbGG9u2Q0EQGHJVM9Wpq3GMdwXRysA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ad2ede27-05ab-47e8-a0ad-c84508c53bb5",
                            TwoFactorEnabled = false,
                            UserName = "guest3@mail.com"
                        },
                        new
                        {
                            Id = "7c19351b-6c51-46e7-8675-461e77553e85",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8aecf1de-922b-49fc-b623-20679ea32159",
                            Email = "guest4@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest4@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEB324aZGtgU8tY9G8dHgPTKwQqK5UodYacxf1jFXWt6r8lS5yCfV+9kJ+K20LPJ7bA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "16e77c63-4163-400c-8558-5f23e6795903",
                            TwoFactorEnabled = false,
                            UserName = "guest4@mail.com"
                        },
                        new
                        {
                            Id = "7b22d19f-eeca-4d21-8d4b-5d14dce78de9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d30bc011-d1fc-45e9-bd1a-6f48eac72e4b",
                            Email = "guest5@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest5@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELEjOmkkTnlGLn1zly3zVIQ9/UkzdxSwFDSf7xfwYiKnUVmlbRRXrjjCbKYc6Pcicw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "891c83c0-44c1-4238-b94f-9d0b5f89eff2",
                            TwoFactorEnabled = false,
                            UserName = "guest5@mail.com"
                        },
                        new
                        {
                            Id = "c04e5168-84b1-4967-a57f-1d7a3265185a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7632b4a8-5b56-4bbd-9502-0f544df207fd",
                            Email = "guest6@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest6@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENnUHRNZe8fBH3loJ0b74/2fgk51TO7gGDjaLYmfGfBrC3FaPpjbV4YULnyeoiNnQQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7e8dbfd2-fbf2-40d0-b525-711a40dc8c35",
                            TwoFactorEnabled = false,
                            UserName = "guest6@mail.com"
                        },
                        new
                        {
                            Id = "7fac2d51-a858-49a1-9ef7-dd5348b818e1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2e0dc051-63ae-462b-88d8-57ef4ba20ed1",
                            Email = "guest7@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest7@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKkGWC0Y7nM0u1lFKvu726P8GzpmLu/XSOurMHOOq3bopnSwFH/Xm/0hqzKMaNResQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a2591e74-3543-4e5d-a7a4-7ccfd2460643",
                            TwoFactorEnabled = false,
                            UserName = "guest7@mail.com"
                        },
                        new
                        {
                            Id = "f88c42ed-58cf-4f92-b1b0-6fa4ebaa65a7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3540ed14-6bc7-4c20-8f57-fe46700f53ac",
                            Email = "guest8@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest8@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJUFV5Q/KwzZMQ7LC4HWQrF6SfLj1GaW9aGWBAECSItShj770ziL1xdNdnqsfU8Cow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c8623f8a-6c65-4d56-994f-351a25ef2504",
                            TwoFactorEnabled = false,
                            UserName = "guest8@mail.com"
                        },
                        new
                        {
                            Id = "7a3e0a03-0b8f-4bef-8d9f-8b4ead73bad6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e39e9ae1-fcc2-4d98-aece-4d808810ef33",
                            Email = "guest9@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest9@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGTj4wn7eENTlMFCMTiQIlW0Ts+kV9CIZUyAaDijqKQQDEkdwUeT+04mUxlLqBE3dQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b705c9fa-76f8-48c2-a3af-58aefdc34855",
                            TwoFactorEnabled = false,
                            UserName = "guest9@mail.com"
                        },
                        new
                        {
                            Id = "fdfbabd7-92a9-4cf0-949b-04ba5303a25f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d1cfd66-c58c-47d1-8447-5caceefc9f6f",
                            Email = "guest10@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest10@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDdyMpPJaE2KtGGF7bld1Sq93AD9eZz9KEB+5zcTGUnAv+NAghMvcoK4Fc6Ft64Oew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4543b85b-4ae3-47fd-9e6f-6df15fc0f75b",
                            TwoFactorEnabled = false,
                            UserName = "guest10@mail.com"
                        },
                        new
                        {
                            Id = "d84fc4e1-1292-49b0-8b1e-74cd3a5afc77",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26181ffc-cd83-4d04-b219-65781ef1919e",
                            Email = "guest11@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest11@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDokQyjoepqFU23LOKW0ZZfIc9PMiRpjHQZdmGJ0MH5yYakP60yYBgkHfkZFfoXWAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "902dd0f0-9c20-41dc-a857-56e89314d798",
                            TwoFactorEnabled = false,
                            UserName = "guest11@mail.com"
                        },
                        new
                        {
                            Id = "66565893-ca7a-4452-9631-a1aeac089013",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b654e14-cf36-4aad-b5e4-fac0bf474e51",
                            Email = "guest12@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest12@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHzMgTRrkOrt/beuklZzcra/D7e9zW81L0A7bdpxt1U5Dl5CB/nLqb5bZSNlmDGVLg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "37acbc39-eb6c-4c86-90db-7a50a8361ff8",
                            TwoFactorEnabled = false,
                            UserName = "guest12@mail.com"
                        },
                        new
                        {
                            Id = "2a295840-a4ec-43a7-9751-cd18e37e3cc9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b23acb0-32eb-478f-af4f-6c2848dfb00c",
                            Email = "guest13@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest13@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOzJLIe/xuV7PzuU4Bkmkb6mBsAFNsYD4z1RSIYKaq4dRjVZkMzFN9bv36eX/VdtuA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7d46a2b7-eac7-4fab-8314-fc73d94f5f9e",
                            TwoFactorEnabled = false,
                            UserName = "guest13@mail.com"
                        },
                        new
                        {
                            Id = "635fc400-b452-4fc6-9d1b-6417156f09e3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "407c4247-1ebb-4e78-8830-cdffaf7723fd",
                            Email = "guest14@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest14@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELrWHmYG8jt7Ul0zWmKXknVIQdZ0vlr5hkfXZEa5v6m0yxF1DUkh15agdbZEoqS/qw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "81bc2b8c-5a7b-4243-b66d-da7a9b60c6f7",
                            TwoFactorEnabled = false,
                            UserName = "guest14@mail.com"
                        },
                        new
                        {
                            Id = "71ac5a95-210a-4cee-9f1d-7dc828266a02",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ce03f228-c161-4e4b-99d6-841246f92846",
                            Email = "guest15@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest15@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJp46RIYq7DASx0cMCVZ597qwSEVCVv7GYUi9+Gbhef2FR5FCP2u+HMTRJ02qwR7/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ea1db76-a399-4b29-9a04-2d5686b1be1a",
                            TwoFactorEnabled = false,
                            UserName = "guest15@mail.com"
                        },
                        new
                        {
                            Id = "48d5174e-f0d0-4087-8e3b-b1028b8f048e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa1810b6-480c-470a-8443-9dfa0764443c",
                            Email = "guest16@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest16@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEypFDzq3tIL1BszkMgohELo6e/A1mvB9yVOzOHY7vFJGALGJkMplhN7+qhKaPm0ig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9bba04ac-44b4-40a6-be2a-0712f9be2a71",
                            TwoFactorEnabled = false,
                            UserName = "guest16@mail.com"
                        },
                        new
                        {
                            Id = "38e59ded-44c3-48ad-82f8-86b78308de4c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d62d070-b4a4-4507-b3f5-a6798119af93",
                            Email = "guest17@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest17@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAxF27nEVwxTYbsHUH0CNrjWeAY15JgpDFRIQRQXVktpG97aTz/GLLz3mXWiPNsDLA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "89b96c54-cc23-4e5f-8a52-3eb6918ac375",
                            TwoFactorEnabled = false,
                            UserName = "guest17@mail.com"
                        },
                        new
                        {
                            Id = "87987032-3400-41db-bd2f-7a75a011d4da",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c6e3a4fd-9da6-48cc-90e8-cf04e1037bf5",
                            Email = "guest18@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest18@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKi26ABVVdYzf91V6p+YOiWfvzg0rxo6LQD379SvQ5M0p9XyGw1cAa3T0HsHa7n8gA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2d3f1513-e5a7-4954-b837-41e0b675b267",
                            TwoFactorEnabled = false,
                            UserName = "guest18@mail.com"
                        },
                        new
                        {
                            Id = "99770179-1e1a-4484-8bb7-77d7d4b12e76",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d4f1c3f0-b3b3-4c6b-9778-9623250e1d6f",
                            Email = "guest19@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest19@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAFVqEqrGu+ZM7JCENbsBNHYsZ7BvI2BQr7YqAXlcdMqElnopA0+vO2AYM6O12iTtA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aa7e59e1-cc11-4f01-bd99-d192590ff3b5",
                            TwoFactorEnabled = false,
                            UserName = "guest19@mail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "a7504080-eb7c-452c-b703-72f7fc747273",
                            RoleId = "8c7c8095-2336-43b3-9494-1828cec9924f"
                        },
                        new
                        {
                            UserId = "8e1cff68-a820-4bc9-8569-d074545d2f4d",
                            RoleId = "69ee48cd-e2e2-4632-941b-77744320a070"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Enrollment", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Group", null)
                        .WithMany("Enrollments")
                        .HasForeignKey("GroupId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Group", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Student", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.StudentToGroupAction", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Teacher", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Topic", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Course", "Course")
                        .WithOne("Topic")
                        .HasForeignKey("IdentityNLayer.Core.Entities.Topic", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.Topic", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Course");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Course", b =>
                {
                    b.Navigation("Topic");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Group", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
