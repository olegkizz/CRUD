// <auto-generated />
using System;
using IdentityNLayer.DAL.EF.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IdentityNLayer.DAL.EF.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210921134843_SecondEntity")]
    partial class SecondEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Super MVC",
                            Title = "ASP",
                            TopicId = 0,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Description = "Super Spring",
                            Title = "Java",
                            TopicId = 0,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Description = "Super JavaScript",
                            Title = "JavaScript",
                            TopicId = 0,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityID")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserID");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FileContent")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.GroupLesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("LessonId");

                    b.ToTable("GroupLessons");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("FileId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Theme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("FileId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Name = "Lesson 1",
                            Theme = "Super Lesson 1"
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 1,
                            Name = "Lesson 2",
                            Theme = "Super Lesson 2"
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 1,
                            Name = "Lesson 3",
                            Theme = "Super Lesson 3"
                        });
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "6d03d503-f347-4589-9e2a-8fe11010f6c6",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1998, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "4c4fce34-cfcf-488d-92fd-1dd42fa99b5d",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            FirstName = "admin",
                            LastName = "admin",
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENdSxFUVMDjIh7GCwJyUuVwpjJegStEeDUOWQlilzUMl09J9zwJYBi0rjJEdzDrbMA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e45f8265-ce2c-4e8a-a923-74e8bd8f0f64",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "5966f610-0485-41a5-9e6e-f6733d73dd8d",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2000, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "4ff00269-c4b8-4e35-ba68-bfe665f4e5a4",
                            Email = "manager@manager.com",
                            EmailConfirmed = true,
                            FirstName = "manager",
                            LastName = "manager",
                            LockoutEnabled = false,
                            NormalizedUserName = "MANAGER@MANAGER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDoecke2DuBbd9hBpaCqJoONkdMfp7o8Y4ogpmV5Z6J4hUSGx5K0kmuGsadnU9dQzQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "18efb5b9-2ba1-402a-8b8b-2af03bbbef0c",
                            TwoFactorEnabled = false,
                            UserName = "manager@manager.com"
                        },
                        new
                        {
                            Id = "9a806450-6952-4bb3-9a70-56481490cb62",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "e1337c70-b119-4390-a745-9b3cec29a276",
                            Email = "guest1@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest1",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest1@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENGwQ6fj6guu2Uoqw3HRTeEsL1Go2WqhBN4zsuS31yhGgysGnI+AbKkj+n7kcWrT5A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "120d9ccb-a6ba-494d-84a7-e46373d28b20",
                            TwoFactorEnabled = false,
                            UserName = "guest1@mail.com"
                        },
                        new
                        {
                            Id = "741bdfb1-900e-4060-9e43-3a5954e7809c",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "ad7e6aac-2296-40b9-8930-1c1deef43bc4",
                            Email = "guest2@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest2",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest2@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENOBMxjmaGpPOTZlcaX7FfHwEzvUZJfmw3bhBnbkqZPF5b6BUitxytzGdaL/6tDEMg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "da9a9a8e-47dc-469a-bdb4-c084e9234d3b",
                            TwoFactorEnabled = false,
                            UserName = "guest2@mail.com"
                        },
                        new
                        {
                            Id = "706141c2-b6fb-4f5a-83e6-ae3a4d87e966",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "b9ee20a3-818e-4758-967e-7c198a146734",
                            Email = "guest3@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest3",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest3@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEN4dPUoFYmh97krERR8LuG8SDXwPGsPPCvvJJFR2LwouY3CVlEHo5P0Ir1y1eClgEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bc7ee151-d9f9-4818-a4fd-7d9bb50de26e",
                            TwoFactorEnabled = false,
                            UserName = "guest3@mail.com"
                        },
                        new
                        {
                            Id = "690bfc84-f70c-4804-8ffa-a8597af14629",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "6b6b64d4-8f2d-4ac3-b35e-276b332e0d99",
                            Email = "guest4@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest4",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest4@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEGJrurTN4YnqxcudT5h5PzjHVe3IL0WuiNBzfpESI7K3B2z1Td62Kpw4dwrY5ftIQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1dfb5961-9b35-4cdb-b914-1fab4a63a963",
                            TwoFactorEnabled = false,
                            UserName = "guest4@mail.com"
                        },
                        new
                        {
                            Id = "fdddfa07-f983-4eb4-bab4-be04d2055889",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "36ddea4d-4571-461f-bfb3-65a42b39c439",
                            Email = "guest5@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest5",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest5@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEleKhm99UeKbq5ltBZJ7PRIKk85O/EJPfY4jLYYRViLb4X7c3cqGlaPJh/ql8KXOA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d8a96948-3cff-4cec-b14f-f8df5b75bdf0",
                            TwoFactorEnabled = false,
                            UserName = "guest5@mail.com"
                        },
                        new
                        {
                            Id = "abdeddcf-b549-4362-ac62-152edab85cc3",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "0d054a4b-3d14-4f0c-a7c5-47d16aacb973",
                            Email = "guest6@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest6",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest6@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEB+QMHUJ1adSE8wt2DsYz6J1V/Xl+Vw5xcTH6RcyUK+gAA3oyqP6EF2sf2qoqcPWxQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de08afb7-e7bf-4a47-b8ac-511a46631675",
                            TwoFactorEnabled = false,
                            UserName = "guest6@mail.com"
                        },
                        new
                        {
                            Id = "9b85ce23-ab2c-4a5a-bf58-992b7b526090",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "1f9492a5-3d7a-457f-b3cd-b610f442205d",
                            Email = "guest7@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest7",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest7@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECk/kefjP0M4eOMjYcsZzB11yIl6K5zkOCQuHY5G4/NsOnHwB25IJj77WCAmJWmYbQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8eb994ab-98e9-4700-b691-c2eb048b7747",
                            TwoFactorEnabled = false,
                            UserName = "guest7@mail.com"
                        },
                        new
                        {
                            Id = "ae170e17-04c3-490e-ba38-a7963d476f87",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "a84b241a-544b-4a4b-b5b5-b605d34385a8",
                            Email = "guest8@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest8",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest8@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEO9nlnhnluf7DBsFFV6ITynltloOyOD9oMjJVNygeLp4LDv4XVjUz00YoIlu9Lb95Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "63d4705c-b5a3-493c-b07c-1483ed2018f8",
                            TwoFactorEnabled = false,
                            UserName = "guest8@mail.com"
                        },
                        new
                        {
                            Id = "726d2614-2c2b-4513-8ec0-d958714a28ab",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "58126b2c-41d4-4912-a7d5-c1d245cca16a",
                            Email = "guest9@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest9",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest9@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJI2megfhSn99Pel9sQuvlaU7UAiudaPR4h5yhsL+3uq2ynobzb2eIJv2VLwbMciJg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a2fb53a8-5f0b-44bb-a38f-acb9fe8b4160",
                            TwoFactorEnabled = false,
                            UserName = "guest9@mail.com"
                        },
                        new
                        {
                            Id = "00c5064f-9a59-48ae-97a5-5104e9e0532e",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "4f53bafa-589d-4599-a5dd-f7d55abb0b97",
                            Email = "guest10@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest10",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest10@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAzzQl/CSdzqQj+1AkjGsMWnPe4Z04bZAjypyl6K2/DHge8P76wLJQyMBnZDsfOEPQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "04d5fe67-519b-4253-b254-5e13f989d883",
                            TwoFactorEnabled = false,
                            UserName = "guest10@mail.com"
                        },
                        new
                        {
                            Id = "5c42312d-a5a4-450c-b81d-4b443ca39072",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "e9d310fc-d1bc-4b76-9de3-36f8f13d4b3c",
                            Email = "guest11@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest11",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest11@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBied+F4Y/O8McMjSvoUmDZeg2DWWPFNLD617ZS5DZPP4NerXDNq7G9jteN9ts84Lg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "24412c12-640e-442f-932b-2c494397daa3",
                            TwoFactorEnabled = false,
                            UserName = "guest11@mail.com"
                        },
                        new
                        {
                            Id = "309969b1-62ab-4733-ad21-226f4596cac4",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "42c72b2b-92a1-4e23-9ee9-11a17f71d9ae",
                            Email = "guest12@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest12",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest12@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHFkyXCmNPRS1Yeb0vn7tOTZH/q6vpNNQZv9oMOXIKjO7Z5451/M4bHF1xLK/zqrEQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5295840f-6c31-404e-82dd-4c20bcfdad00",
                            TwoFactorEnabled = false,
                            UserName = "guest12@mail.com"
                        },
                        new
                        {
                            Id = "79fc20ba-44e4-475b-ba45-33e4fccdbe6e",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "f4d50e9e-ac66-4069-b363-e04f78ccfafc",
                            Email = "guest13@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest13",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest13@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECC0QQ7bZtE3y4QhSiNxOyPVKNt8zZjEnwAobKpGAPToXqEry5IU12deDTYcHDjXkQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5acb730c-0ad8-4edd-99f0-fa9cca73ab55",
                            TwoFactorEnabled = false,
                            UserName = "guest13@mail.com"
                        },
                        new
                        {
                            Id = "dca25f69-938e-4792-8f28-6ecb8f6194d0",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "2daadd83-e891-4ec7-9413-db5a3d384d85",
                            Email = "guest14@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest14",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest14@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP4uyRB36MLW/8xKX5eD6YIc6Gls0DbBwS9SHoyQtGXDWjm+3FdXGjzKYSWamAjsEg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "116f3163-cd4f-40b8-9b5a-332dbcd85934",
                            TwoFactorEnabled = false,
                            UserName = "guest14@mail.com"
                        },
                        new
                        {
                            Id = "4c61584d-7deb-4bb8-852f-33a5ea63f685",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "12fc9739-561d-4b60-bcde-5e17aad4b4e9",
                            Email = "guest15@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest15",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest15@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGNHHU64/KwWygu8BMiDtdh7er5rCdxjPRcihZVtwDGeV749Fzb6I42coG30ZWWgrA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6d189016-782a-4b18-9e28-5f29eba3f37b",
                            TwoFactorEnabled = false,
                            UserName = "guest15@mail.com"
                        },
                        new
                        {
                            Id = "9d8e0b8c-eced-4449-b476-039d40d6654f",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "b469d8f8-42e1-431e-b111-d71135468b6e",
                            Email = "guest16@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest16",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest16@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMi22XzRXHbMxl+M5WRDhfXDnIx1VN0sEt8CgmAANgErVIWBB2/aOaN2kj3T5N3JbQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "124819bd-5a13-4e15-a66d-748efbfe7d76",
                            TwoFactorEnabled = false,
                            UserName = "guest16@mail.com"
                        },
                        new
                        {
                            Id = "45a9d50b-f2bd-4e65-bdb5-db027bb388df",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "07e8a4d6-1eac-42a6-8caf-bb2d2d4017a9",
                            Email = "guest17@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest17",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest17@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAED8qWA8mXa6j+ey03G/ac07Zk80gvy+RcNIvDFNjRXyyYOzz2UVfGO9uGTdxjvxlyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51c85fca-f669-49ec-8006-bbf8b4540529",
                            TwoFactorEnabled = false,
                            UserName = "guest17@mail.com"
                        },
                        new
                        {
                            Id = "3e641274-2374-40fc-927f-13b2fabb78cd",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "4a08f2eb-444e-44da-ada6-ba0817e5b595",
                            Email = "guest18@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest18",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest18@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE58w7Jpvlr1D+XxjOwwAsyDYoJeVK06WSKEKMut0U64uImn7F/yW3ZUIYKcVJNGUg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1e098761-e1f7-4203-a1ff-17ec9ac8ec9a",
                            TwoFactorEnabled = false,
                            UserName = "guest18@mail.com"
                        },
                        new
                        {
                            Id = "65d88639-f6c3-4f0e-90d0-d9bec5a76549",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "6383ebde-91ea-4de7-a389-bd29246e310c",
                            Email = "guest19@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest19",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest19@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEwjd/D8zK827LOtEZDyZ6iPaov7KyRCvw9+exIKUynBLpDaZiBi+o6o2Uh8bOaPQA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b2c7ca6d-3c6e-4d78-909c-8b39dd7fdcf9",
                            TwoFactorEnabled = false,
                            UserName = "guest19@mail.com"
                        });
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.StudentToGroupAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentToGroupActions");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkToProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Description = "Super MVC",
                            Title = ".NET"
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            Description = "Super Spring",
                            Title = "Spring"
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 3,
                            Description = "Super ReactJS",
                            Title = "ReactJS"
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 3,
                            Description = "Super AngularJS",
                            Title = "AngularJS"
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 3,
                            Description = "Super NodeJS",
                            Title = "NodeJS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "098f7686-f445-4d4f-a757-b2ed81904621",
                            ConcurrencyStamp = "30e6fa4d-d4e6-4b94-a066-f444adc43e9b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "935fcd9f-251e-4e2d-b39b-780a2d70577c",
                            ConcurrencyStamp = "730322dc-552b-49cc-92fb-a0147b58b10d",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "ebb77167-7855-4a03-8496-75fa51e365bd",
                            ConcurrencyStamp = "6f247d20-2395-44a4-b384-7bbe0f24e1be",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "db5a908e-edc3-48b4-82fd-edbef9bfa314",
                            ConcurrencyStamp = "1a5fc134-3cab-4319-8e52-b145d6af7266",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "6d03d503-f347-4589-9e2a-8fe11010f6c6",
                            RoleId = "098f7686-f445-4d4f-a757-b2ed81904621"
                        },
                        new
                        {
                            UserId = "5966f610-0485-41a5-9e6e-f6733d73dd8d",
                            RoleId = "935fcd9f-251e-4e2d-b39b-780a2d70577c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Enrollment", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Group", null)
                        .WithMany("Enrollments")
                        .HasForeignKey("GroupId");

                    b.HasOne("IdentityNLayer.Core.Entities.Person", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Group", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.GroupLesson", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Lesson", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.Navigation("Course");

                    b.Navigation("File");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Student", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Person", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.StudentToGroupAction", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Teacher", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Person", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Topic", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Course", "Course")
                        .WithOne("Topic")
                        .HasForeignKey("IdentityNLayer.Core.Entities.Topic", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.Topic", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Course");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Course", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Group", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
