// <auto-generated />
using System;
using IdentityNLayer.DAL.EF.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IdentityNLayer.DAL.EF.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210914142006_FirstDAta")]
    partial class FirstDAta
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Program")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Super MVC",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "ASP",
                            TopicId = 0,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Description = "Super Spring",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Java",
                            TopicId = 0,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Description = "Super JavaScript",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "JavaScript",
                            TopicId = 0,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityID")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserID");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "77dbb15b-cb84-4105-bd60-1412e6105e9b",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1998, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "2286069a-52d5-4dbf-962b-5e0f33485e08",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            FirstName = "admin",
                            LastName = "admin",
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJVQz++pv6e8HT81az6+HLMr7NuyGywFwczW1DmQEoYYE3ywRmZIz/w/MYfqWmx2gQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8207f357-3df7-4b3b-8ca7-815e574cd555",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "70809927-0934-4046-9227-8fe693cf581d",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2000, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "2cb84fa6-1a15-469b-8298-c698367afaa9",
                            Email = "manager@manager.com",
                            EmailConfirmed = true,
                            FirstName = "manager",
                            LastName = "manager",
                            LockoutEnabled = false,
                            NormalizedUserName = "MANAGER@MANAGER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIfL5ygFB52YYIiicK8yq4/hk0KPmVeRWYGI5j+cQnKfM3jwvmEwVsF9h3LMPLMdeg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "96c1de80-5b9f-4738-987d-05d9aa70bb89",
                            TwoFactorEnabled = false,
                            UserName = "manager@manager.com"
                        },
                        new
                        {
                            Id = "b7895ba8-0f90-4b2e-a3de-e17a6f854e0c",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "64e6ca33-42fc-4829-bcf2-d02923a4ae3f",
                            Email = "guest1@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest1",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest1@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENus2AxYlPmlg0XdRnPCocROUcgzmyMsOA7qIFhHK/dkHPVHBR+dHO1CMvRdc9aylw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6c5cec04-28fd-4e5b-82de-c0328125545c",
                            TwoFactorEnabled = false,
                            UserName = "guest1@mail.com"
                        },
                        new
                        {
                            Id = "66d2a5e5-7fab-48a3-a2e4-dd7792d5e343",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "d28fcb3b-8e94-4f52-82e2-05882aee10e2",
                            Email = "guest2@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest2",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest2@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEChFwme4p40/DBMK9ZBvSmGm4/VHIIOeUYpUTGc1TiuhFF5eHIpR7N0nKBfEdvP+1w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "822da6e7-51e0-4fbb-9a58-1de96b89bfe4",
                            TwoFactorEnabled = false,
                            UserName = "guest2@mail.com"
                        },
                        new
                        {
                            Id = "c67e1c37-6ce2-4d48-a148-f74cd81608cf",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "05105bc1-b448-439d-b728-1bb7348bc51d",
                            Email = "guest3@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest3",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest3@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBFyotxUx42XrDPQxIVxP89ykaU1PQK7DhjUJI7zwU2TOlxdRSXlxvYOGtzRqPZSOQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "16fc26f5-cbe9-47a8-a6b8-c9483fa8541d",
                            TwoFactorEnabled = false,
                            UserName = "guest3@mail.com"
                        },
                        new
                        {
                            Id = "fe808efa-47ba-4806-83bf-f3d985fea494",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "ef3e9481-2b79-4093-852e-166856677e8d",
                            Email = "guest4@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest4",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest4@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAxOJc75lArnZvY2lLHrD3WCoBxu5mWuLat+1Wu7UCTF+axPa8fCzLh+LYhGVP0Ttw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "86ec7e53-842f-4cd7-a17e-6eef33d2a632",
                            TwoFactorEnabled = false,
                            UserName = "guest4@mail.com"
                        },
                        new
                        {
                            Id = "2d4c882a-0c18-46ef-a96e-0e0cb3746f97",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "73320288-4018-4322-b0d6-e2e89ad3a2bb",
                            Email = "guest5@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest5",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest5@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELquhm158/ctbwb7aZQo4QiP+TMRmGp2E8LS4jYwd9Y3iYfu73B8twq+mRZ5FivD1Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "39174241-9205-4ca2-b18b-22dd063ae40b",
                            TwoFactorEnabled = false,
                            UserName = "guest5@mail.com"
                        },
                        new
                        {
                            Id = "c68bca45-322a-4695-b2b9-88440973b06b",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "e53e528d-8545-450c-964e-b754e808e868",
                            Email = "guest6@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest6",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest6@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEISak01JKom2hBYDNJK6g51Etc+Am6PatSUaJLoiazCY9XH3rrcrzTPyV8RA9YaIXg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4883e03-1bef-430b-aab9-06cc73d8d806",
                            TwoFactorEnabled = false,
                            UserName = "guest6@mail.com"
                        },
                        new
                        {
                            Id = "de75d06d-ec68-4ea9-979a-decac518fcf6",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "50bcc35e-ea9c-4cb8-bf6a-f5b691abad14",
                            Email = "guest7@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest7",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest7@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFn28mCRYs/reXL882t1Nu7gZaOMtX5FWoSvCrDoRHBqurQklZm07EzhNkMs6Z1tdw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6a942cda-f6b7-4754-91ca-2b313b6ff3bc",
                            TwoFactorEnabled = false,
                            UserName = "guest7@mail.com"
                        },
                        new
                        {
                            Id = "058956ce-4182-4568-927b-f02dd0d52b76",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "8d99ac6b-dd4e-4b61-942d-b6789e68f668",
                            Email = "guest8@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest8",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest8@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGXD//VzYDIaaZjD9S7PeVJWpbpNI094HA7b4Edey27AqeCBA6XXq0xy99uKqWOH1A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "81e87c7f-6eee-4421-8fa6-3cc222b150e1",
                            TwoFactorEnabled = false,
                            UserName = "guest8@mail.com"
                        },
                        new
                        {
                            Id = "5614966d-8a8e-4224-9893-5e9c81c07bda",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "83c2cbdd-cff8-4b6f-8a46-07ac0117ae04",
                            Email = "guest9@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest9",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest9@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEB8jY6IuaWVYP06I3SpB3s/s4Db5pTniQIUanIgdLhvWsUzKLMO7ineGntisgv1dvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cdb9a2e1-871e-47a1-a4ea-672a193711b8",
                            TwoFactorEnabled = false,
                            UserName = "guest9@mail.com"
                        },
                        new
                        {
                            Id = "199c09ef-9668-4015-83b5-3d44d4de8c1a",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "f692a009-ed00-41b9-b005-3d3816505387",
                            Email = "guest10@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest10",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest10@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMu2OaFyaophzjqEhxFlWRsgDqBNUZgOX0FWGE2VQxlTDGkoWLgcgMsnmnwMeCWQfg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0fa875a4-93fc-4ba9-a129-59fad3b3830a",
                            TwoFactorEnabled = false,
                            UserName = "guest10@mail.com"
                        },
                        new
                        {
                            Id = "86980d47-6227-4445-8f59-660b397b0137",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "909efd25-2a95-479a-9ef8-8fade5596432",
                            Email = "guest11@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest11",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest11@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKWF1JQJZws8RJw9DslFMvrMOJVBYNc8JsFbQ5x+PqqgsaPdxQdsuLI/CvCNZtZzlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "769c1b09-d79b-4895-88e7-576a9b41dc08",
                            TwoFactorEnabled = false,
                            UserName = "guest11@mail.com"
                        },
                        new
                        {
                            Id = "207284bc-8116-44ef-8936-332dd0809840",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "2e05f87a-a493-49e1-bdf9-08254595c8ce",
                            Email = "guest12@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest12",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest12@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOqzJHJpYVvZ/DyI8yFgr1/wAjx1I5yhM9vrBPSsWRk7ZnG2AU7l5JjdoPIUW+qlfQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f8687968-06b1-4969-859a-b43496a66758",
                            TwoFactorEnabled = false,
                            UserName = "guest12@mail.com"
                        },
                        new
                        {
                            Id = "31ef740c-707c-4535-b4cd-17a86339b286",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "469299c0-83e6-4dc6-bbee-2f0e35b8f3a6",
                            Email = "guest13@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest13",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest13@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECTIfiIKuAQ9fyQuU7qbQN3ttaHdSulUzRbuV0ApugL6opUkRchBPvaaZmzpILKhPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "83895968-a495-4d5c-93c3-04fe0d7bfd61",
                            TwoFactorEnabled = false,
                            UserName = "guest13@mail.com"
                        },
                        new
                        {
                            Id = "7c5bdad2-446e-4687-8a18-f343300357b4",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "b36bb167-cf0f-457b-8e86-fa30a3582585",
                            Email = "guest14@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest14",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest14@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMknqWG0FXZVU2eLDKmfXMHaPeT9IExxFugd1br1JWdRtKDkzBH/YV7QNW3sfb5Qmw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c36190db-c783-4ccc-b9af-ce9108643798",
                            TwoFactorEnabled = false,
                            UserName = "guest14@mail.com"
                        },
                        new
                        {
                            Id = "02625fde-e353-435a-981f-72ddeffd9fb0",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "3b84e622-1ad1-41f9-b0da-4f2d2651d9af",
                            Email = "guest15@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest15",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest15@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGS6M63KBjIyLxn05QXTjOY/avLqNf30Z8S7XhBlN2570lafDW5TZQdmZnaUqyLosQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df58a24f-b2c5-484f-b759-a45524e8d5ee",
                            TwoFactorEnabled = false,
                            UserName = "guest15@mail.com"
                        },
                        new
                        {
                            Id = "e2f3f11d-530f-4048-8b02-9863739f2026",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "40f073fd-b461-4679-96b4-39af2fcf1560",
                            Email = "guest16@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest16",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest16@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHnGKagbH6zhLuSBqC2VdpSLUfTBEjlX8cljPeerALny9kVGmspNiucfhVgGPG2C1Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5d314997-aad2-447c-845c-331734cb27e4",
                            TwoFactorEnabled = false,
                            UserName = "guest16@mail.com"
                        },
                        new
                        {
                            Id = "cc7ff695-c0b4-4872-af30-b996c95d4211",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "ea0680f3-d8b9-4df8-b48f-af1b8d4bce1f",
                            Email = "guest17@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest17",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest17@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJZu39DUnDE/49m5R0vcJp2NduobHhDVw8OJXmkrasdXARYVinKI5cE+/uPu9RlPUA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7e50e501-ddbc-4057-a207-90bb4e689ee8",
                            TwoFactorEnabled = false,
                            UserName = "guest17@mail.com"
                        },
                        new
                        {
                            Id = "a54b8ee7-72ff-402e-a3ba-86a2cead1c19",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "e75ab222-e813-4d8b-83b9-d5973b9a73c0",
                            Email = "guest18@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest18",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest18@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMKsG5WHBup5iFNiGpe5cwvmiVPNSyj7yWgVTaq6yhXeQ2Qk2AKJBpLazVCxPpQ0Cw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "97f4ea42-b174-4ade-9f33-7e6ac2f458d4",
                            TwoFactorEnabled = false,
                            UserName = "guest18@mail.com"
                        },
                        new
                        {
                            Id = "0b90a86b-949f-4856-8891-9b45b0bc52e9",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "318c075b-98d8-497b-b3f1-c669ffa35315",
                            Email = "guest19@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest19",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest19@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGFaY5xB0zvSKHE9kMy8OeebDeIbwKllD7h0oQ3LBeMk7gsSAbxOnkLZgYSwwXqHdg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5f39b29d-3fe7-47e8-b6e5-a3365d23717c",
                            TwoFactorEnabled = false,
                            UserName = "guest19@mail.com"
                        });
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.StudentToGroupAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentToGroupActions");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkToProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ParentId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Description = "Super MVC",
                            Title = ".NET"
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            Description = "Super Spring",
                            Title = "Spring"
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 3,
                            Description = "Super ReactJS",
                            Title = "ReactJS"
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 3,
                            Description = "Super AngularJS",
                            Title = "AngularJS"
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 3,
                            Description = "Super NodeJS",
                            Title = "NodeJS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1a850231-a336-4407-b177-ca71d4267e33",
                            ConcurrencyStamp = "460b7740-f546-40f7-823f-6a23670fc331",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "62df2641-3ce0-4b61-b5eb-5a64c0bc465e",
                            ConcurrencyStamp = "0df4f9b8-021a-4966-8321-96931c7d2472",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "b3cdb649-ed9c-40f0-b96a-810a034b1d1f",
                            ConcurrencyStamp = "8cbdea32-6d11-4a7a-afb3-1758b0a1c3d1",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "6af2d20b-b113-45d0-9e82-66648006fb5c",
                            ConcurrencyStamp = "c767bc93-a07c-475f-9fd0-649b0897029e",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "77dbb15b-cb84-4105-bd60-1412e6105e9b",
                            RoleId = "1a850231-a336-4407-b177-ca71d4267e33"
                        },
                        new
                        {
                            UserId = "70809927-0934-4046-9227-8fe693cf581d",
                            RoleId = "62df2641-3ce0-4b61-b5eb-5a64c0bc465e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Enrollment", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Group", null)
                        .WithMany("Enrollments")
                        .HasForeignKey("GroupId");

                    b.HasOne("IdentityNLayer.Core.Entities.Person", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Group", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Student", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Person", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.StudentToGroupAction", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Teacher", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Person", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Topic", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Course", "Course")
                        .WithMany("Topics")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.Topic", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Course");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Course", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Group", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
