// <auto-generated />
using System;
using IdentityNLayer.DAL.EF.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IdentityNLayer.DAL.EF.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Super MVC",
                            Title = "ASP",
                            TopicId = 1,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Description = "Super Spring",
                            Title = "Java",
                            TopicId = 2,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Description = "Super JavaScript",
                            Title = "JavaScript",
                            TopicId = 3,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Description = "Super Python",
                            Title = "Python",
                            TopicId = 5,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityID")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserID");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FileContent")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.GroupLesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("LessonId");

                    b.ToTable("GroupLessons");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("FileId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Theme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("FileId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Duration = 5,
                            Name = "Lesson 1",
                            Theme = "Super Lesson 1"
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 1,
                            Duration = 5,
                            Name = "Lesson 2",
                            Theme = "Super Lesson 2"
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 1,
                            Duration = 5,
                            Name = "Lesson 3",
                            Theme = "Super Lesson 3"
                        });
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LinkToContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "cb93483c-3391-4a23-a4dd-5e9c0e518602",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1998, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "2630d96c-84a3-4314-901f-38bbad2f8a9c",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            FirstName = "admin",
                            LastName = "admin",
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPTFmKESFMob24bxO4KeFbRMBPVax8ItjVcSfHl8ZFJN8kXKtrh5tktOhyTHmbXWWQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2dfccf43-6139-4093-a2c0-9c5518cf7a0e",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "852ca49f-1619-4d99-8b09-b1e91d0d04ff",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2000, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "909536c6-0a71-4444-a742-e68f6efb441f",
                            Email = "manager@manager.com",
                            EmailConfirmed = true,
                            FirstName = "manager",
                            LastName = "manager",
                            LockoutEnabled = false,
                            NormalizedUserName = "MANAGER@MANAGER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFDjhim9BDcn1EfDDmQmdBD3DhKlxx/ASduvLW5g7tD9oKYDZcPkOwI+xNE7eRJixQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fea3357b-ca8b-4a3d-86d6-521a373509cd",
                            TwoFactorEnabled = false,
                            UserName = "manager@manager.com"
                        },
                        new
                        {
                            Id = "49676724-9b31-4936-b2d1-0740fd6e4627",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "89ad82c0-4e09-42ce-8ecd-322677856d1b",
                            Email = "guest1@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest1",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest1@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGi5jsQi1gN/SupTk6RpWXX79OIQ/xPtwYE9W4QxR7msz3wSZttvy83NJfVaJ7Z+dA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e63d8942-650e-4ba0-8426-880f42b0efcc",
                            TwoFactorEnabled = false,
                            UserName = "guest1@mail.com"
                        },
                        new
                        {
                            Id = "6e2f52c6-1bbe-4f23-b36a-b276ed10e54b",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "ab3a9fe2-eadf-46a6-811a-b271855f9448",
                            Email = "guest2@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest2",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest2@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELh+ggVEH7pjJjHkw7h5531dRrfoXuoZyM+lazxavteSvo7D9rc1J6gKtWfNssEveA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5311dfcc-819f-4567-9591-e744e8085792",
                            TwoFactorEnabled = false,
                            UserName = "guest2@mail.com"
                        },
                        new
                        {
                            Id = "4969de28-5308-411b-af82-eb8a9b6b5091",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "61909bac-8fa6-4d36-a926-391626391fdf",
                            Email = "guest3@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest3",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest3@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI5E9Kc6lvQqTcGbBkOe414gWwdaXfzpuiRl7SWoL6ftF6I7xSF+Rc39nwfhT7jxJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a36dbff0-6aa3-40f3-ab14-e525acfcc696",
                            TwoFactorEnabled = false,
                            UserName = "guest3@mail.com"
                        },
                        new
                        {
                            Id = "283aeb1d-4dba-49f0-8597-f55c05b7a1e0",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "7c2b863c-e092-4700-a785-c508116a1789",
                            Email = "guest4@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest4",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest4@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGqV0wrdeG6JTswgIPNkrQof/rHqYkJnqYDFpC6KtU5rtUjjQsrY9E0x8cNvzMa4Mw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1e31d731-52cf-410d-add4-d9648d1669ab",
                            TwoFactorEnabled = false,
                            UserName = "guest4@mail.com"
                        },
                        new
                        {
                            Id = "1967840a-b38f-41a5-903c-012e3b2d25b6",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "a038b38e-746f-4d4c-a8ea-6e862c481800",
                            Email = "guest5@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest5",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest5@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELNB5sxsGwje7v1b4PXvs7bKK4+mgjwZmbFVjxUs9a4Cb2hI02MXo3wGY5Vq1gdLTQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "534c78d4-3647-4de2-9024-ca52e57c3f92",
                            TwoFactorEnabled = false,
                            UserName = "guest5@mail.com"
                        },
                        new
                        {
                            Id = "dd504119-de1e-4d50-a866-2b7a9bbe16a0",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c5680bd3-f95f-4cab-bccb-5d84d0b0bab6",
                            Email = "guest6@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest6",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest6@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAnNQ5zDMvVaDi4nDu9WKlJbu7Cra5yDSs8NC3HIxfI517lhut7cjjRajKAOMDIxsw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "99c8ad47-ccdc-4c0a-a0a0-308a547d7c36",
                            TwoFactorEnabled = false,
                            UserName = "guest6@mail.com"
                        },
                        new
                        {
                            Id = "36cb28b0-9fb1-46f9-99ff-a071ea8bc769",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "9d5a9947-f322-4e1e-9e29-abe25e7483e8",
                            Email = "guest7@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest7",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest7@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI9STmlvBkjI5mRg7p9GkMa+1HqgGUptYiI5m0jhvDb3Dhw+P8rMwSrTwvP+eduPQw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2e7258ef-26c6-4cfa-82ae-56d3fd41a13d",
                            TwoFactorEnabled = false,
                            UserName = "guest7@mail.com"
                        },
                        new
                        {
                            Id = "18f350b7-4dbf-4a05-9a48-3509415890a6",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "5e24ad3f-5808-4d57-9360-d969783e0d31",
                            Email = "guest8@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest8",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest8@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENNB5h3joM+JqPMkR7p1Wwl8v3dTz5V1rQ8H5bphyH5zOhnsqnj6L68rfniT/fEAuw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1500f562-5970-4b0d-9c36-0e15134164ce",
                            TwoFactorEnabled = false,
                            UserName = "guest8@mail.com"
                        },
                        new
                        {
                            Id = "a2305cf8-b61b-407c-8584-255a46eae3e2",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "03a39a8c-a197-4401-9d81-4a8cbd137f96",
                            Email = "guest9@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest9",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest9@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEC5Foe0yYgUxkGar/IKM1eTGNa2Or3Ga1mkfhkeVRsky/RUtOBRFn2uJAVYNJdCYzQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b27fdc96-d09c-4050-bef2-4759446144ab",
                            TwoFactorEnabled = false,
                            UserName = "guest9@mail.com"
                        },
                        new
                        {
                            Id = "4babdb25-0cc3-4e16-830f-083c881ad932",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "9c5293e7-8d08-43cc-8dfe-4f7c37a90098",
                            Email = "guest10@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest10",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest10@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEExZY76h8lyKDFjpA5FmZDv6eoriYkFxWT7VpZTjjnLY0KMDLxO5PM2hgd/4IvflLQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e442ad6c-a121-4f9c-86e8-3f248b2e58a6",
                            TwoFactorEnabled = false,
                            UserName = "guest10@mail.com"
                        },
                        new
                        {
                            Id = "9ee86e0f-2703-4300-9c4d-a51692607087",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "dd858f18-3319-4427-9266-6e52ab6f9760",
                            Email = "guest11@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest11",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest11@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBTk63KacR0D/MnliodI+2gG2PkZRHm4spTIgEOY8Gayn5qEQ3E/CpsFKT6U+qEJGQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a9087dfe-3668-4864-b6ab-d52cc7d58a8c",
                            TwoFactorEnabled = false,
                            UserName = "guest11@mail.com"
                        },
                        new
                        {
                            Id = "242129a6-69da-49fe-88e5-aec37559b807",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c2d6dff5-2e5e-425e-afe2-64dd3d4a18e1",
                            Email = "guest12@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest12",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest12@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIGkr5bs15ycRlUlNHn1YcZ7yQwWOW2wXZHIGrFQ26csspx7caOk8Re1ZCN1jem1lg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "52505a40-2a5d-47b1-bcb5-db8718d03e84",
                            TwoFactorEnabled = false,
                            UserName = "guest12@mail.com"
                        },
                        new
                        {
                            Id = "946eb14c-5032-4fd1-a92c-889b27fdf22e",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "3242b62e-f10f-41fc-85c6-faf9ca2d712e",
                            Email = "guest13@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest13",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest13@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOiV/kV5RSv6KKwnMaxI1iuddeFJDEkI6ADd87HYK9mMIC+cG/ptU+ReDQGGqA0kqw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0ea8d5c9-1b1f-42ce-9c68-a80451699322",
                            TwoFactorEnabled = false,
                            UserName = "guest13@mail.com"
                        },
                        new
                        {
                            Id = "534d74ee-fdd9-416e-8ef3-71033c537b6a",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "55776b44-3567-4bce-9bbf-fde109540766",
                            Email = "guest14@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest14",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest14@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENUti8Jnbf0ck+5RLJRDOAcrNmXJ0s06HhAVo2k+qS9xNcOypuZaKifqPZlNyniTPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cca37989-71af-4601-a719-b5189c971faa",
                            TwoFactorEnabled = false,
                            UserName = "guest14@mail.com"
                        },
                        new
                        {
                            Id = "924198cd-14ad-49fc-8fec-69a299aff272",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "13b2cd56-806e-4981-b1c0-694c33b35f44",
                            Email = "guest15@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest15",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest15@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEKR98dMsprLotWuXvhnozqb49bGePQoZdTmxDQtXHohvzd1FqJxViHjN3ZwfS/97w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dda873eb-0040-464d-a40a-1aa03e57a91f",
                            TwoFactorEnabled = false,
                            UserName = "guest15@mail.com"
                        },
                        new
                        {
                            Id = "089927af-9f98-4ce8-838f-c3f1e7d46b94",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "68330fb6-769c-46d2-a418-74b09463c437",
                            Email = "guest16@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest16",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest16@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEO5aH5ijXNn4HJjiZ4VqmfnhWD8/NIXW/xceyWVfojrh0XeLAT9BcF4zWUIDuhaJkw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ff25d6fe-ea14-46d5-bb3f-7a7e5f74ff44",
                            TwoFactorEnabled = false,
                            UserName = "guest16@mail.com"
                        },
                        new
                        {
                            Id = "9066ac52-e825-4822-b075-8ef620c7c611",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "83e41360-01c1-40ac-bdb5-3720b4be1d02",
                            Email = "guest17@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest17",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest17@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFoW0oEucvUgM4otzabKaOO5vwbOgqbxF3uYbRcF+qoXW3wciTIZPbu5MxqY7STA8g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4b78217-a46b-4044-8a92-b35adf4477c7",
                            TwoFactorEnabled = false,
                            UserName = "guest17@mail.com"
                        },
                        new
                        {
                            Id = "c38ed63f-ebc1-4c72-9e1b-ff2e9b387433",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "9af8e0cf-3059-44b5-9066-e4d89f31a5d6",
                            Email = "guest18@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest18",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest18@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECuLXzVwuFl9Bx0+262c8CYp37HfHSsmgb0xMXRjKxG+/Da2mGAXqiQiojoib5L2XQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "78031e49-8ebd-4db7-ad01-a5367c057c32",
                            TwoFactorEnabled = false,
                            UserName = "guest18@mail.com"
                        },
                        new
                        {
                            Id = "d0a8b9d6-d1ea-4c98-b63d-66cb5f71f846",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "5938b488-7af8-4f34-a74f-0071d125c59b",
                            Email = "guest19@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest19",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest19@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFxIjIxoI3qSxmAJc4ZIbN2Bo4VGM60SBUF2hzUvTWfUqXKHapH4eFHB0yW3KdVFUA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd9ba037-ea2c-4728-b246-2c96a2642ccf",
                            TwoFactorEnabled = false,
                            UserName = "guest19@mail.com"
                        });
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.StudentMark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("LessonId")
                        .HasColumnType("int");

                    b.Property<int?>("Mark")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentMarks");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.StudentToGroupAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentToGroupActions");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkToProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Super MVC",
                            Title = ".NET"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Super Spring",
                            Title = "Spring"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Super ReactJS",
                            Title = "ReactJS"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Super AngularJS",
                            Title = "AngularJS"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Super PythonBackend",
                            Title = "PythonBackend"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "d9b2deec-89dc-4f4d-bd08-cab9a6fc1a25",
                            ConcurrencyStamp = "5b90b91e-10b8-4f6a-9f0d-11c47e72279b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3672b7f2-195a-4ba6-ad1e-0e1dd169bb8c",
                            ConcurrencyStamp = "bf6ef346-9f4b-49e3-84a1-f9b0d69b238b",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "acdd5a81-58dd-4bcd-a113-226be4cdd1f2",
                            ConcurrencyStamp = "42bd63cb-baf9-4c9d-98ec-457afe95b87d",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "a54919e9-67d5-4a66-aceb-97981c9661a9",
                            ConcurrencyStamp = "ac4cc7ce-4186-4baa-b337-f0fb03a6b321",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "cb93483c-3391-4a23-a4dd-5e9c0e518602",
                            RoleId = "d9b2deec-89dc-4f4d-bd08-cab9a6fc1a25"
                        },
                        new
                        {
                            UserId = "852ca49f-1619-4d99-8b09-b1e91d0d04ff",
                            RoleId = "3672b7f2-195a-4ba6-ad1e-0e1dd169bb8c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Course", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Enrollment", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Group", null)
                        .WithMany("Enrollments")
                        .HasForeignKey("GroupId");

                    b.HasOne("IdentityNLayer.Core.Entities.Person", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Group", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.Manager", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IdentityNLayer.Core.Entities.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");

                    b.Navigation("Course");

                    b.Navigation("Manager");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.GroupLesson", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Lesson", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.Navigation("Course");

                    b.Navigation("File");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Manager", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Person", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Student", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Person", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.StudentMark", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("IdentityNLayer.Core.Entities.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId");

                    b.HasOne("IdentityNLayer.Core.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.StudentToGroupAction", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Teacher", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Person", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Topic", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Topic", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Course", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Group", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
