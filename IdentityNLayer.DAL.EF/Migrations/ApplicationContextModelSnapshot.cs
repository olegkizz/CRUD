// <auto-generated />
using System;
using IdentityNLayer.DAL.EF.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IdentityNLayer.DAL.EF.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Super MVC",
                            Title = "ASP",
                            TopicId = 1,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Description = "Super Spring",
                            Title = "Java",
                            TopicId = 2,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Description = "Super JavaScript",
                            Title = "JavaScript",
                            TopicId = 3,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Description = "Super Python",
                            Title = "Python",
                            TopicId = 5,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Description = "Super PHP",
                            Title = "PHP",
                            TopicId = 6,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            Description = "Super PHP",
                            Title = "PHP",
                            TopicId = 7,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityID")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserID");

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EntityID = 1,
                            Role = 3,
                            State = 0,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserID = "b303e61e-6b3a-48b4-a4fc-3175840921a7"
                        },
                        new
                        {
                            Id = 2,
                            EntityID = 2,
                            Role = 3,
                            State = 0,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserID = "327ed16e-6857-4fbf-b548-ccb6ae875499"
                        },
                        new
                        {
                            Id = 3,
                            EntityID = 3,
                            Role = 3,
                            State = 0,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserID = "8b318b2f-6da1-4fda-8569-5ec2c616dc06"
                        },
                        new
                        {
                            Id = 4,
                            EntityID = 4,
                            Role = 3,
                            State = 0,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserID = "64530410-94ad-4f35-9c57-369626b3120c"
                        },
                        new
                        {
                            Id = 5,
                            EntityID = 1,
                            Role = 3,
                            State = 0,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserID = "a8568844-3eff-43b1-a056-b6a268d0baff"
                        },
                        new
                        {
                            Id = 6,
                            EntityID = 2,
                            Role = 3,
                            State = 0,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserID = "96637916-fc7d-4c1a-9fa6-5c1333f8182b"
                        },
                        new
                        {
                            Id = 7,
                            EntityID = 3,
                            Role = 3,
                            State = 0,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserID = "4fe22b44-56fd-4e18-97d5-2bafc06b8985"
                        },
                        new
                        {
                            Id = 8,
                            EntityID = 4,
                            Role = 3,
                            State = 0,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserID = "d311541a-1eb5-4ff1-b3f7-4cf9488d66a6"
                        },
                        new
                        {
                            Id = 9,
                            EntityID = 1,
                            Role = 3,
                            State = 0,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserID = "0e57a01c-79f6-4fb3-826e-99e97eef753e"
                        },
                        new
                        {
                            Id = 10,
                            EntityID = 2,
                            Role = 3,
                            State = 0,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserID = "04f5c6bc-8c8b-4d51-b5aa-628359015b2c"
                        },
                        new
                        {
                            Id = 11,
                            EntityID = 3,
                            Role = 3,
                            State = 0,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserID = "4bc45931-567a-45c1-9957-30688c16ac96"
                        },
                        new
                        {
                            Id = 12,
                            EntityID = 1,
                            Role = 2,
                            State = 2,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserID = "1f817850-7284-4c93-924f-4b98757d6339"
                        },
                        new
                        {
                            Id = 13,
                            EntityID = 2,
                            Role = 2,
                            State = 2,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserID = "be35fe96-8b81-43ba-8f1d-d0917ea569a0"
                        },
                        new
                        {
                            Id = 14,
                            EntityID = 3,
                            Role = 2,
                            State = 2,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserID = "2f85eb25-4314-441f-b48a-8252294691bf"
                        },
                        new
                        {
                            Id = 15,
                            EntityID = 4,
                            Role = 2,
                            State = 2,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserID = "9bdd5c5f-c359-44cf-9236-87eea9b36913"
                        },
                        new
                        {
                            Id = 16,
                            EntityID = 5,
                            Role = 2,
                            State = 2,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserID = "548f64e8-e83a-4e5d-85a7-7c2c16a28274"
                        });
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FileContent")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("MethodistId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("MethodistId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            MethodistId = 17,
                            Number = "ASP-1",
                            StartDate = new DateTime(2021, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TeacherId = 12
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            MethodistId = 18,
                            Number = "Java-1",
                            StartDate = new DateTime(2021, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            TeacherId = 13
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 3,
                            MethodistId = 19,
                            Number = "JavaScript-1",
                            StartDate = new DateTime(2021, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            TeacherId = 14
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 4,
                            MethodistId = 20,
                            Number = "Python-1",
                            StartDate = new DateTime(2021, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            TeacherId = 15
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 5,
                            MethodistId = 21,
                            Number = "PHP-1",
                            StartDate = new DateTime(2021, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            TeacherId = 16
                        });
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.GroupLesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("LessonId");

                    b.ToTable("GroupLessons");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("FileId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Theme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("FileId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Duration = 5,
                            Name = "Lesson 1",
                            Theme = "Super Lesson 1"
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 1,
                            Duration = 5,
                            Name = "Lesson 2",
                            Theme = "Super Lesson 2"
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 1,
                            Duration = 5,
                            Name = "Lesson 3",
                            Theme = "Super Lesson 3"
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 2,
                            Duration = 1,
                            Name = "Lesson 1",
                            Theme = "Super Lesson 1"
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 2,
                            Duration = 1,
                            Name = "Lesson 2",
                            Theme = "Super Lesson 2"
                        },
                        new
                        {
                            Id = 6,
                            CourseId = 2,
                            Duration = 1,
                            Name = "Lesson 3",
                            Theme = "Super Lesson 3"
                        });
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Methodist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LinkToContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Methodists");

                    b.HasData(
                        new
                        {
                            Id = 17,
                            LinkToContact = "https://web.telegram.org",
                            UserId = "af329e4e-1c95-45eb-af28-d51402030a87"
                        },
                        new
                        {
                            Id = 18,
                            LinkToContact = "https://web.telegram.org",
                            UserId = "7bb4ec4f-e6db-4f97-a003-c117ee1b3c3e"
                        },
                        new
                        {
                            Id = 19,
                            LinkToContact = "https://web.telegram.org",
                            UserId = "ca7db5b9-ef26-4480-9810-02258bda2904"
                        },
                        new
                        {
                            Id = 20,
                            LinkToContact = "https://web.telegram.org",
                            UserId = "7611c080-1a64-4f9f-8dca-6c66646e08c4"
                        },
                        new
                        {
                            Id = 21,
                            LinkToContact = "https://web.telegram.org",
                            UserId = "2bd2ce37-376f-4762-a78d-b1335ddfac35"
                        });
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "d3ed8abf-0003-44bd-bd7c-9010005f8855",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1998, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "cb41b8e4-9451-441a-9c9a-68965645954c",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            FirstName = "admin",
                            LastName = "admin",
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE8Jtdqupv1UDWXfnhDIElLk2Wd5pG3iHa5XAvKayPR1/ogRjgB6Mr0SQXr0hQ/xfQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "71041d34-186f-47c4-9004-6eaa05a9fdc0",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "b303e61e-6b3a-48b4-a4fc-3175840921a7",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "736c05bb-4502-4794-82ff-5f18cd4b5584",
                            Email = "guest0@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest0",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest0@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGO0eUe0sxTePf5kXLjXaNd1mcOiWg8D60WvbzJ0EVg6fY6HqPXPb4+dZr1A9zOHZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "350318a5-90f8-4c8a-bd19-343790bf2afc",
                            TwoFactorEnabled = false,
                            UserName = "guest0@mail.com"
                        },
                        new
                        {
                            Id = "327ed16e-6857-4fbf-b548-ccb6ae875499",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "a1a5f3ce-dd16-44f2-a0c8-cfd0330ac924",
                            Email = "guest1@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest1",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest1@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEH2gHTnFU2oFXI9ZazmEIQuWP4ngJ9PnxrS4sXFVH8TwiQ3Q2FdVzJoe+zXegMVVEA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "37225e0b-6d18-4165-8b6e-5bf188932e9f",
                            TwoFactorEnabled = false,
                            UserName = "guest1@mail.com"
                        },
                        new
                        {
                            Id = "8b318b2f-6da1-4fda-8569-5ec2c616dc06",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c880b085-8f0b-495d-a16e-2c5ad62c5267",
                            Email = "guest2@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest2",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest2@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBt185DxFMSgIdbLTdtz4DXuaH/n7xT8DNrJzj7V8Znco5QLpdUv8O7yIm8b+ZyDzg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e9318eed-7728-45d2-9fc8-0462ed2c8114",
                            TwoFactorEnabled = false,
                            UserName = "guest2@mail.com"
                        },
                        new
                        {
                            Id = "64530410-94ad-4f35-9c57-369626b3120c",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "41a59a1c-82e1-4975-9115-d84813f3ae4a",
                            Email = "guest3@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest3",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest3@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDBWTHaFPWf03voJiN33AEhW1P0C7aSJFn7uSoj3OKXGM4AdKV3zhrqSQHGzc73log==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e4664e5b-fec3-499d-bf8b-115a1bf7f967",
                            TwoFactorEnabled = false,
                            UserName = "guest3@mail.com"
                        },
                        new
                        {
                            Id = "a8568844-3eff-43b1-a056-b6a268d0baff",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "4448814e-c8e0-4857-8fc3-8245eda7d9c0",
                            Email = "guest4@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest4",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest4@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOGAC6dIIkp4YDEjAvxr2RXcdwV6qDBBLkwqOvQm0bFe3tTOalbJyqNY2Cuc4Hmq7w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00529847-b313-44b6-babb-c54746db05e4",
                            TwoFactorEnabled = false,
                            UserName = "guest4@mail.com"
                        },
                        new
                        {
                            Id = "96637916-fc7d-4c1a-9fa6-5c1333f8182b",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "801935e2-67b5-4238-ad56-34351d761f4f",
                            Email = "guest5@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest5",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest5@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEF25RU05JWazU4iIgvAvUEhtDhAEFc0Rsk3/ryVoD5L8Y1tQ4GxyQgpR6Bb9oa2B2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8adfa8f3-afa0-4d54-a248-e73ac6eba495",
                            TwoFactorEnabled = false,
                            UserName = "guest5@mail.com"
                        },
                        new
                        {
                            Id = "4fe22b44-56fd-4e18-97d5-2bafc06b8985",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "592d49db-15f9-4fb2-8085-4ec1d4029773",
                            Email = "guest6@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest6",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest6@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAHDbceRo1cX0QphooEV9w7CtEW5sIDHsRj4VJI4Vc0QEXgQKsG3E+nvLfOWHlYzqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b90b6e4-6078-46e8-9f78-7e43227f0112",
                            TwoFactorEnabled = false,
                            UserName = "guest6@mail.com"
                        },
                        new
                        {
                            Id = "d311541a-1eb5-4ff1-b3f7-4cf9488d66a6",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "e4ae6c9b-e6e7-427f-bee4-8375549d6d6d",
                            Email = "guest7@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest7",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest7@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHa6FppseixeuGLHIcmjNIG29g60/JNXF3EAltdgV3z0AIAn29W+lGYdTHRTkaRydA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "894a6ba2-47b5-424c-b365-917c1208c803",
                            TwoFactorEnabled = false,
                            UserName = "guest7@mail.com"
                        },
                        new
                        {
                            Id = "0e57a01c-79f6-4fb3-826e-99e97eef753e",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "23f571ac-27bf-478d-97f8-f7b06e25f4e0",
                            Email = "guest8@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest8",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest8@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMq5tyF6NAj5TkdyKsWpYsq778OEmODs1SHz1m/d/skEzcAosNPZkumSNTpxy24bPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0d8f0178-37b0-4ba6-822f-ed56675c8951",
                            TwoFactorEnabled = false,
                            UserName = "guest8@mail.com"
                        },
                        new
                        {
                            Id = "04f5c6bc-8c8b-4d51-b5aa-628359015b2c",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "f8f523aa-9dc0-4db7-b453-92854fefeed3",
                            Email = "guest9@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest9",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest9@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKYNQsdk+9CM0bHcNnZbyogdvDhTc9E5wa+cszFGN9wrhFBU+IhceUXiDKwko7aXwA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "86acf8e8-d189-4b07-a27e-434e2e96057e",
                            TwoFactorEnabled = false,
                            UserName = "guest9@mail.com"
                        },
                        new
                        {
                            Id = "4bc45931-567a-45c1-9957-30688c16ac96",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "2fd6d1c0-d4fa-4f24-a551-70c82640f080",
                            Email = "guest10@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest10",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest10@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAu9nUYRSPAZ9f0PFhX9cF6mt/gkEsJUyjJkKDnIohtLLOhCNixGf5RXxvlqNpyzgw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "78f729ed-e483-457c-a69c-8c3d768b111d",
                            TwoFactorEnabled = false,
                            UserName = "guest10@mail.com"
                        },
                        new
                        {
                            Id = "1f817850-7284-4c93-924f-4b98757d6339",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "950cd829-71b9-44a9-897c-bda4a9ee5f54",
                            Email = "guest11@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest11",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest11@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE9Dhecvfy2WH1nnj9OB7mzYCklIWYOZX3x9u0wBYJp/p0UielLG8YLOHrwjgq998w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d8362cc4-d6a6-4113-9630-8f5c211c865f",
                            TwoFactorEnabled = false,
                            UserName = "guest11@mail.com"
                        },
                        new
                        {
                            Id = "be35fe96-8b81-43ba-8f1d-d0917ea569a0",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "cc3bc7f0-25b0-464e-92f9-8c4a6b697c31",
                            Email = "guest12@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest12",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest12@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEC4j+f9hWEziBDfeWdBjPj5n6aIypoVzAGOwsEa9cXI3bOvdA5YxVAZHrxKNGR7iAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "87835736-e962-4eb7-b46c-c1682319911c",
                            TwoFactorEnabled = false,
                            UserName = "guest12@mail.com"
                        },
                        new
                        {
                            Id = "2f85eb25-4314-441f-b48a-8252294691bf",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "5dd49f51-a2c9-46d5-884d-9316ad04343f",
                            Email = "guest13@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest13",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest13@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBTzi5jb+UoCgXi3VmcLzx7V6PO/gJ4jD0zHkGmgItSIgm1QUNgAqj3J0bxfFT1lyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "beca0019-cf91-4b9b-87b0-22d5e81e509d",
                            TwoFactorEnabled = false,
                            UserName = "guest13@mail.com"
                        },
                        new
                        {
                            Id = "9bdd5c5f-c359-44cf-9236-87eea9b36913",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "7196520d-cc76-40bf-a437-7ebca82345e6",
                            Email = "guest14@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest14",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest14@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENzSOn9eqAo43Nt4FWT7t1FzYoiprosRZZbJaf6ZCUzkljDNEva/k8uZgjRF749Obw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ec37b6e5-75a9-4590-840d-18ec12affd3a",
                            TwoFactorEnabled = false,
                            UserName = "guest14@mail.com"
                        },
                        new
                        {
                            Id = "548f64e8-e83a-4e5d-85a7-7c2c16a28274",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "11a3b22b-4e1c-44b0-bb5b-717a15af0603",
                            Email = "guest15@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest15",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest15@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEN1GEsNDHmcPzT12WDL2rJsyhcyAR/bPZIFlCDizE+wzZrzn+Y+RJrW+s4hg0m7ntw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "48021715-21ac-4d26-a72b-e5a2257b5915",
                            TwoFactorEnabled = false,
                            UserName = "guest15@mail.com"
                        },
                        new
                        {
                            Id = "af329e4e-1c95-45eb-af28-d51402030a87",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "8a064b43-0738-4952-9fef-b6ec77a186ef",
                            Email = "guest16@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest16",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest16@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGsDpQiCuurkL70NTuEKF5BF8fmaMZOIO0C4zgO3W4bd+Jq/nGandFV+UFWc0flckg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "87ef1da0-59d8-4cb0-90ff-3660ad774b38",
                            TwoFactorEnabled = false,
                            UserName = "guest16@mail.com"
                        },
                        new
                        {
                            Id = "7bb4ec4f-e6db-4f97-a003-c117ee1b3c3e",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "18934eec-6425-46be-9bae-f4e58d66dcda",
                            Email = "guest17@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest17",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest17@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIqnAEoBwSU9G3x2iIyLR1vzJ7hR8dXJeMbZsFpE3br4nAa+XaHCAnLsR7BY0eW6GA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6469d14d-707d-4f9a-8f9a-f4d11c6ce705",
                            TwoFactorEnabled = false,
                            UserName = "guest17@mail.com"
                        },
                        new
                        {
                            Id = "ca7db5b9-ef26-4480-9810-02258bda2904",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "f15592b5-0fe7-4f01-95cd-21ef5ef85398",
                            Email = "guest18@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest18",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest18@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPoEQcl7kEznU7fqGDHTmI169JzfN6txqyfdV9mnsAS3mfiRmeDKm32lFJnN3nwq+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1237281f-0cbc-4872-a570-d223ae60dcf2",
                            TwoFactorEnabled = false,
                            UserName = "guest18@mail.com"
                        },
                        new
                        {
                            Id = "7611c080-1a64-4f9f-8dca-6c66646e08c4",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "2d4e2c56-07fd-43d0-a21c-7bf6d2ce095b",
                            Email = "guest19@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest19",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest19@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDErfFL1XQdo+0eo9HiAC9kS3nnYo7RoldQEGdRIzxVd12jUlH/DCVo/eZMWJ6u/Fg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e928625d-3fef-4bb0-9ec6-bf64c84fd2b8",
                            TwoFactorEnabled = false,
                            UserName = "guest19@mail.com"
                        },
                        new
                        {
                            Id = "2bd2ce37-376f-4762-a78d-b1335ddfac35",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "af22e2a8-109a-4b98-ad70-2cd31db2098c",
                            Email = "guest20@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest20",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest20@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDV+gdtNwWgLSqYImmBjb/s7C7eq8bbU6x5YMw3NNq+JL2EWUslWv3df6vl3SXjp2Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1bbf864f-16ac-4a5f-b3bf-812dcde0e2dd",
                            TwoFactorEnabled = false,
                            UserName = "guest20@mail.com"
                        },
                        new
                        {
                            Id = "60334305-6995-4261-b295-e2aa9668557d",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "ea54735c-5b54-4636-a931-05fa4bb5907d",
                            Email = "guest21@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest21",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest21@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAvWmQmhdoAiqblLed/48Fum3PRYyQSmeRPp/zK7DJR99s2A3VaeoLdrqxKtGqL9lg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3b17defb-32f0-4463-9665-973ee1e9b191",
                            TwoFactorEnabled = false,
                            UserName = "guest21@mail.com"
                        },
                        new
                        {
                            Id = "85a86443-1fcb-41f6-933c-a53139a70e84",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "3096c8af-c3af-4794-a3e8-fc262375bb7e",
                            Email = "guest22@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest22",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest22@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECUYyA86bSAzY4eMgv14Kds2czWPtqQsCfEeqhAWu2q532vY3caaOxdtg+vwVYx7BA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c1169582-fc8c-40de-8858-781f1aec82f5",
                            TwoFactorEnabled = false,
                            UserName = "guest22@mail.com"
                        },
                        new
                        {
                            Id = "14e6b0c7-d2d6-4ca5-a5a5-179d18b42a21",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "8045500f-6208-4c44-91e0-756142c71440",
                            Email = "guest23@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest23",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest23@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBaycZfdYfUlgwkvB6/7/MpfQr9Mio2RmXQjTeMPeNitpGW7OGNbQj4uF0EVzgh3qA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "209e68de-f9f9-4aae-96ec-4e9faad3dec6",
                            TwoFactorEnabled = false,
                            UserName = "guest23@mail.com"
                        },
                        new
                        {
                            Id = "a98703e2-1887-4b63-a4d3-042933f7c386",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "59afa278-9dfd-4acf-80d6-211025bcb16a",
                            Email = "guest24@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest24",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest24@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBQA7tJ06kFbdOnlUXeXv0O4aNuMO6usRFtyx/o5Z74FrK7nW82QvbeSa4AK6CGhpA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b207572b-c423-43ed-b106-0e11133dee95",
                            TwoFactorEnabled = false,
                            UserName = "guest24@mail.com"
                        });
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = 0,
                            UserId = "b303e61e-6b3a-48b4-a4fc-3175840921a7"
                        },
                        new
                        {
                            Id = 2,
                            Type = 0,
                            UserId = "327ed16e-6857-4fbf-b548-ccb6ae875499"
                        },
                        new
                        {
                            Id = 3,
                            Type = 0,
                            UserId = "8b318b2f-6da1-4fda-8569-5ec2c616dc06"
                        },
                        new
                        {
                            Id = 4,
                            Type = 0,
                            UserId = "64530410-94ad-4f35-9c57-369626b3120c"
                        },
                        new
                        {
                            Id = 5,
                            Type = 0,
                            UserId = "a8568844-3eff-43b1-a056-b6a268d0baff"
                        },
                        new
                        {
                            Id = 6,
                            Type = 0,
                            UserId = "96637916-fc7d-4c1a-9fa6-5c1333f8182b"
                        },
                        new
                        {
                            Id = 7,
                            Type = 0,
                            UserId = "4fe22b44-56fd-4e18-97d5-2bafc06b8985"
                        },
                        new
                        {
                            Id = 8,
                            Type = 0,
                            UserId = "d311541a-1eb5-4ff1-b3f7-4cf9488d66a6"
                        },
                        new
                        {
                            Id = 9,
                            Type = 0,
                            UserId = "0e57a01c-79f6-4fb3-826e-99e97eef753e"
                        },
                        new
                        {
                            Id = 10,
                            Type = 0,
                            UserId = "04f5c6bc-8c8b-4d51-b5aa-628359015b2c"
                        },
                        new
                        {
                            Id = 11,
                            Type = 0,
                            UserId = "4bc45931-567a-45c1-9957-30688c16ac96"
                        });
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.StudentMark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("LessonId")
                        .HasColumnType("int");

                    b.Property<int?>("Mark")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentMarks");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.StudentToGroupAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentToGroupActions");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkToProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 12,
                            Bio = "Teacher12. Programmist.",
                            LinkToProfile = "https://github.com",
                            UserId = "1f817850-7284-4c93-924f-4b98757d6339"
                        },
                        new
                        {
                            Id = 13,
                            Bio = "Teacher13. Programmist.",
                            LinkToProfile = "https://github.com",
                            UserId = "be35fe96-8b81-43ba-8f1d-d0917ea569a0"
                        },
                        new
                        {
                            Id = 14,
                            Bio = "Teacher14. Programmist.",
                            LinkToProfile = "https://github.com",
                            UserId = "2f85eb25-4314-441f-b48a-8252294691bf"
                        },
                        new
                        {
                            Id = 15,
                            Bio = "Teacher15. Programmist.",
                            LinkToProfile = "https://github.com",
                            UserId = "9bdd5c5f-c359-44cf-9236-87eea9b36913"
                        },
                        new
                        {
                            Id = 16,
                            Bio = "Teacher16. Programmist.",
                            LinkToProfile = "https://github.com",
                            UserId = "548f64e8-e83a-4e5d-85a7-7c2c16a28274"
                        });
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Super MVC",
                            Title = ".NET"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Super Spring",
                            Title = "Spring"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Super ReactJS",
                            Title = "ReactJS"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Super AngularJS",
                            Title = "AngularJS"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Super PythonBackend",
                            Title = "PythonBackend"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Super Magento",
                            Title = "PHP Magento"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Super WordPress",
                            Title = "PHP WordPress"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "fadb92af-6bec-461f-a769-a70bd30df2da",
                            ConcurrencyStamp = "648945d9-2387-43a4-a1f1-87e6cc31bf57",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "15d18b58-a0a4-4f87-bce4-3c692370a9ab",
                            ConcurrencyStamp = "423e39ee-1cc5-4975-bd1c-e7edc659ec79",
                            Name = "Methodist",
                            NormalizedName = "METHODIST"
                        },
                        new
                        {
                            Id = "64d6ed5b-0d40-46eb-963a-fdda178d0a86",
                            ConcurrencyStamp = "259d782a-0c12-4e67-a6ef-33847ac386b9",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "9101c5bd-3b81-4689-9d33-90b46c11f80d",
                            ConcurrencyStamp = "b54c42db-3718-4def-902d-83ff11243c55",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "d3ed8abf-0003-44bd-bd7c-9010005f8855",
                            RoleId = "fadb92af-6bec-461f-a769-a70bd30df2da"
                        },
                        new
                        {
                            UserId = "b303e61e-6b3a-48b4-a4fc-3175840921a7",
                            RoleId = "64d6ed5b-0d40-46eb-963a-fdda178d0a86"
                        },
                        new
                        {
                            UserId = "327ed16e-6857-4fbf-b548-ccb6ae875499",
                            RoleId = "64d6ed5b-0d40-46eb-963a-fdda178d0a86"
                        },
                        new
                        {
                            UserId = "8b318b2f-6da1-4fda-8569-5ec2c616dc06",
                            RoleId = "64d6ed5b-0d40-46eb-963a-fdda178d0a86"
                        },
                        new
                        {
                            UserId = "64530410-94ad-4f35-9c57-369626b3120c",
                            RoleId = "64d6ed5b-0d40-46eb-963a-fdda178d0a86"
                        },
                        new
                        {
                            UserId = "a8568844-3eff-43b1-a056-b6a268d0baff",
                            RoleId = "64d6ed5b-0d40-46eb-963a-fdda178d0a86"
                        },
                        new
                        {
                            UserId = "96637916-fc7d-4c1a-9fa6-5c1333f8182b",
                            RoleId = "64d6ed5b-0d40-46eb-963a-fdda178d0a86"
                        },
                        new
                        {
                            UserId = "4fe22b44-56fd-4e18-97d5-2bafc06b8985",
                            RoleId = "64d6ed5b-0d40-46eb-963a-fdda178d0a86"
                        },
                        new
                        {
                            UserId = "d311541a-1eb5-4ff1-b3f7-4cf9488d66a6",
                            RoleId = "64d6ed5b-0d40-46eb-963a-fdda178d0a86"
                        },
                        new
                        {
                            UserId = "0e57a01c-79f6-4fb3-826e-99e97eef753e",
                            RoleId = "64d6ed5b-0d40-46eb-963a-fdda178d0a86"
                        },
                        new
                        {
                            UserId = "04f5c6bc-8c8b-4d51-b5aa-628359015b2c",
                            RoleId = "64d6ed5b-0d40-46eb-963a-fdda178d0a86"
                        },
                        new
                        {
                            UserId = "4bc45931-567a-45c1-9957-30688c16ac96",
                            RoleId = "64d6ed5b-0d40-46eb-963a-fdda178d0a86"
                        },
                        new
                        {
                            UserId = "1f817850-7284-4c93-924f-4b98757d6339",
                            RoleId = "9101c5bd-3b81-4689-9d33-90b46c11f80d"
                        },
                        new
                        {
                            UserId = "be35fe96-8b81-43ba-8f1d-d0917ea569a0",
                            RoleId = "9101c5bd-3b81-4689-9d33-90b46c11f80d"
                        },
                        new
                        {
                            UserId = "2f85eb25-4314-441f-b48a-8252294691bf",
                            RoleId = "9101c5bd-3b81-4689-9d33-90b46c11f80d"
                        },
                        new
                        {
                            UserId = "9bdd5c5f-c359-44cf-9236-87eea9b36913",
                            RoleId = "9101c5bd-3b81-4689-9d33-90b46c11f80d"
                        },
                        new
                        {
                            UserId = "548f64e8-e83a-4e5d-85a7-7c2c16a28274",
                            RoleId = "9101c5bd-3b81-4689-9d33-90b46c11f80d"
                        },
                        new
                        {
                            UserId = "af329e4e-1c95-45eb-af28-d51402030a87",
                            RoleId = "15d18b58-a0a4-4f87-bce4-3c692370a9ab"
                        },
                        new
                        {
                            UserId = "7bb4ec4f-e6db-4f97-a003-c117ee1b3c3e",
                            RoleId = "15d18b58-a0a4-4f87-bce4-3c692370a9ab"
                        },
                        new
                        {
                            UserId = "ca7db5b9-ef26-4480-9810-02258bda2904",
                            RoleId = "15d18b58-a0a4-4f87-bce4-3c692370a9ab"
                        },
                        new
                        {
                            UserId = "7611c080-1a64-4f9f-8dca-6c66646e08c4",
                            RoleId = "15d18b58-a0a4-4f87-bce4-3c692370a9ab"
                        },
                        new
                        {
                            UserId = "2bd2ce37-376f-4762-a78d-b1335ddfac35",
                            RoleId = "15d18b58-a0a4-4f87-bce4-3c692370a9ab"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Course", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Enrollment", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Group", null)
                        .WithMany("Enrollments")
                        .HasForeignKey("GroupId");

                    b.HasOne("IdentityNLayer.Core.Entities.Person", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Group", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.Methodist", "Methodist")
                        .WithMany()
                        .HasForeignKey("MethodistId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IdentityNLayer.Core.Entities.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");

                    b.Navigation("Course");

                    b.Navigation("Methodist");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.GroupLesson", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Lesson", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.Navigation("Course");

                    b.Navigation("File");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Methodist", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Person", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Student", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Person", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.StudentMark", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("IdentityNLayer.Core.Entities.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId");

                    b.HasOne("IdentityNLayer.Core.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.StudentToGroupAction", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Teacher", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Person", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Topic", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Topic", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Course", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Group", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
