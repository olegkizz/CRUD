// <auto-generated />
using System;
using IdentityNLayer.DAL.EF.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IdentityNLayer.DAL.EF.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Program")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Super MVC",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "ASP",
                            TopicId = 0,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Description = "Super Spring",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Java",
                            TopicId = 0,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Description = "Super JavaScript",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "JavaScript",
                            TopicId = 0,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityID")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserID");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.StudentToGroupAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentToGroupActions");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkToProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ParentId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Description = "Super MVC",
                            Title = ".NET"
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            Description = "Super Spring",
                            Title = "Spring"
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 3,
                            Description = "Super ReactJS",
                            Title = "ReactJS"
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 3,
                            Description = "Super AngularJS",
                            Title = "AngularJS"
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 3,
                            Description = "Super NodeJS",
                            Title = "NodeJS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "f974cfc9-615e-40ca-9be9-7c9b73ee80be",
                            ConcurrencyStamp = "0845952e-d55d-4f0e-894d-0044fb11ead4",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "9139cbbb-2459-4edc-b1e7-5066480bc2f4",
                            ConcurrencyStamp = "5393bf86-6f1d-42b5-aecd-fd8dd286b561",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "b670ed94-2ce7-4759-8e6b-afb0f705b48c",
                            ConcurrencyStamp = "715de2cd-3e39-4216-b52c-a94c4896f4ee",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "90066eaa-99a5-4968-be1f-b423c3a070e6",
                            ConcurrencyStamp = "ec7d6dfd-4c69-4422-9ec4-3dac567c2e8e",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "87b8ae22-f7bb-4a34-8305-b67d4ca8cf24",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "549c13bc-5f91-45f7-a8a0-6dd267e87192",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMHDV1lMWYBbXobHEiiTeP6dbnNgfZWsXscxcc2VOvE6DFvj0JwlQUJwJfrxKe1tuA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "56247421-dbef-4202-ad49-ef736f3234ff",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "8ba459fd-a82a-444d-8283-028b5f9cb501",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5a435f49-06c7-47b7-9c8b-e332e2766425",
                            Email = "manager@manager.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "MANAGER@MANAGER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGoheJdd302ZvFg4QoeKflONDYYIRxNj0UwsF1CPIE0Y5i/iHLdP4BK24s6kq1MXTQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "50c2e4be-cebe-4798-bc36-0fc0ef3dbee2",
                            TwoFactorEnabled = false,
                            UserName = "manager@manager.com"
                        },
                        new
                        {
                            Id = "5aa7651c-a469-4995-a9ba-a3724644882a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f412604-38e1-45eb-946e-8634d7959a69",
                            Email = "guest1@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest1@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHvOj/oA6gL1tpqt56g5qj2upakDwcm8Ifnnzx5p2s8EBT8acP/YNZwUMyNqHiPdIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5d5342d7-7e99-4027-b216-6e5e03dd1555",
                            TwoFactorEnabled = false,
                            UserName = "guest1@mail.com"
                        },
                        new
                        {
                            Id = "83176973-1496-4fb8-8e0f-b4f9b651ab01",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3af4dbff-4f6f-4c2f-9aff-356da40bc4eb",
                            Email = "guest2@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest2@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHFxwwwr/Pmao2ZuuMlsQpM0EUt4IDj7RimEmuWqTKng/pA8MCc0bWHz0efiLBAEdQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8ce84607-8197-42f2-a143-58a13d79b6bb",
                            TwoFactorEnabled = false,
                            UserName = "guest2@mail.com"
                        },
                        new
                        {
                            Id = "9a64d4a7-d6f4-4d50-8a6b-b9ca32ed5d87",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "665c36ee-fcd4-4a96-b63c-b04d69039630",
                            Email = "guest3@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest3@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENLjRgMkmisw6x3pZVKL5sbbDStXEnByWUIX9hHVO90ekaP+tEswUMQhIEAEd2zU2Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4ebf4ed-3bb5-486d-8590-d3f02d36343e",
                            TwoFactorEnabled = false,
                            UserName = "guest3@mail.com"
                        },
                        new
                        {
                            Id = "b39932d7-4db7-4674-a3f2-fe00c72f8748",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0cbe9e17-a432-4dd1-b841-b23c18428c27",
                            Email = "guest4@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest4@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFYXCCB2L8P3OkhxfgT3hLl/wey/EaeVvAaa0OXFwqxys/VPsurIOHUCuPtAms+x2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "86650fde-bfa4-4056-9b23-92fced99525b",
                            TwoFactorEnabled = false,
                            UserName = "guest4@mail.com"
                        },
                        new
                        {
                            Id = "a4e3680b-6791-45ed-b2ec-8dbee81577a5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8f1e315f-ce48-4103-b2a8-fecd70d26f1f",
                            Email = "guest5@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest5@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI2pru7JkuBdc7zfD2LZwKBO8JpJw2EhwAuN22W7Mj1mfWEbiRQMU5Huof7KMxkNNg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2e326771-b0d3-4e98-8a01-33acc71e5331",
                            TwoFactorEnabled = false,
                            UserName = "guest5@mail.com"
                        },
                        new
                        {
                            Id = "3f39d911-b85b-4c2f-8f56-c72a08421e57",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "651edb3c-676a-41e6-9502-4706a8b2288c",
                            Email = "guest6@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest6@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEL09IKIrSNP+UhzQ5RUkekVrJZ6KYESStc8KfJHfjHpP90/pBBYAMfdOaLsje2peZg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3120089b-4102-45eb-a657-d4903edbd8ba",
                            TwoFactorEnabled = false,
                            UserName = "guest6@mail.com"
                        },
                        new
                        {
                            Id = "2c83f54e-49fe-4619-8046-806af9473a24",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ba8c7c1-b36e-4fdd-a211-9db009031ba5",
                            Email = "guest7@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest7@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENbo5kcPRQLmg4yMw3u3AheL8ux+QyMbteeYLfr1DNbFwFuLv9RuH3ja5hmJ7LJ/jw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e5714087-c207-4091-81a3-b71fe614b545",
                            TwoFactorEnabled = false,
                            UserName = "guest7@mail.com"
                        },
                        new
                        {
                            Id = "dc66f024-8723-4b24-94fa-57cc75b92fda",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ffce8b0d-a8e7-4180-a1fd-b7740df683e1",
                            Email = "guest8@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest8@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPoCZHx3fOyo20lvWV2Ee3e4EaDRFDrVDoraV/T0GlG2IpkPhG3yBx6TB3mRyxT4rA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "089f9b7d-60a3-4f18-9a45-6cffce25de9d",
                            TwoFactorEnabled = false,
                            UserName = "guest8@mail.com"
                        },
                        new
                        {
                            Id = "06396765-0b99-48e3-8ade-b4d8b1ac6c73",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a9daee95-decb-48c1-83d3-5ffc1f2e9c5f",
                            Email = "guest9@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest9@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPp+2J+xvg2Wg9KP3WNWl/D7liDlYsEFWsOKRapfx5xeewFouWpnp4P4FdhJb+9qUg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b80de4cd-6144-4ae0-8054-98c515718a42",
                            TwoFactorEnabled = false,
                            UserName = "guest9@mail.com"
                        },
                        new
                        {
                            Id = "af199eb4-3433-4856-af06-e7654b9d5bf7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3221fabc-ceb6-430e-975c-e7fe22cce4e7",
                            Email = "guest10@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest10@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMNZzt5OA7OHoGibDHCuczapzlME3mC82bpSGNGsNlkavcs+seHpXbxLReLo662gxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8f4c6ddd-c71d-4ea0-b10f-0ce033a9a2dd",
                            TwoFactorEnabled = false,
                            UserName = "guest10@mail.com"
                        },
                        new
                        {
                            Id = "817db1aa-7569-4c74-915a-451779e30be3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "355be7b2-fd2a-4011-a400-6850f689bac4",
                            Email = "guest11@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest11@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEL2dxw/NFnEnvlihyU8T1EpWdjhVFfGNxOHMD4yyL60TTKETvhwoKcACLRPC4ym9dw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "972a55db-6cfe-4422-bd74-0d2191275646",
                            TwoFactorEnabled = false,
                            UserName = "guest11@mail.com"
                        },
                        new
                        {
                            Id = "f8f6db97-1c7b-429d-b94a-3da89b3419f8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7c5c1a6b-58cf-462b-8475-96db91c8c1fc",
                            Email = "guest12@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest12@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJmpSMO2QX0TlmWsKlXq72xqOVKwHSlgj6ZoSbrW1ApKkVElryQz/fbrLFFR5GomUw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e28d4bad-c027-4b3a-af3b-8c6b0464a1a1",
                            TwoFactorEnabled = false,
                            UserName = "guest12@mail.com"
                        },
                        new
                        {
                            Id = "1a04fe4f-60aa-460d-8fe0-06a0c5aaaceb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8479d6c6-318f-46fa-b3a5-5d9e7ac97c4f",
                            Email = "guest13@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest13@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEB6cOCH0KykM1MX7RJlQpggHXU17HgvabQPvFEaWQ0oPITo6TSabWjzNSghCK5lM3w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7817d6dc-3d3e-4530-87d6-83ba1ffdabc0",
                            TwoFactorEnabled = false,
                            UserName = "guest13@mail.com"
                        },
                        new
                        {
                            Id = "dcc7b531-1b55-41af-8819-0ab4478b65e3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5f8dca84-37c3-46f4-96e0-5af3e9d85ae2",
                            Email = "guest14@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest14@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMv5SQU78wXva8cjy3DaGapR5Gfg0AUHeukFpQvtRZf1tPJ7EAgTXBypzi+gsugGEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "abbbc3c9-ff60-4fcf-ae9a-73c6a7526c95",
                            TwoFactorEnabled = false,
                            UserName = "guest14@mail.com"
                        },
                        new
                        {
                            Id = "dc3ac115-a993-4e5b-b675-f92bf5053ba3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1c6537b7-a5ea-453d-8195-b6e10b9744a3",
                            Email = "guest15@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest15@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFeRFZYljSXdbyLba7Rvq73OmTS8RZpgzPlIdCwT/OVzJWFEB1zbhtPIYHzhM+yeZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dc3801e1-ca89-42b6-b625-907799ed2490",
                            TwoFactorEnabled = false,
                            UserName = "guest15@mail.com"
                        },
                        new
                        {
                            Id = "36b4c48b-18cd-46e3-b1c2-e3cb66acc40b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0ffa9b86-596f-4053-9ed5-30f4f23448b9",
                            Email = "guest16@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest16@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECoWGvC66wJl3y8/7ClFiIeRzUjC2bXgI3rQAiXEmOe0oB+r4zUF2prhWiqGWvnWCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "82cfa8c3-7a31-43a1-83e1-7a83ad765108",
                            TwoFactorEnabled = false,
                            UserName = "guest16@mail.com"
                        },
                        new
                        {
                            Id = "891acd0b-40e2-4b44-aa86-e33b964ce923",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "99c03f6d-4451-48b8-8348-d09fbb2ef734",
                            Email = "guest17@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest17@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKDUgqNU9FdP1HWEkK+kTxUuvkbSEg8XBaiHKORC+HdkR2wSkhNe8m8SQTT08PcABQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "41767906-78bd-4dfd-8aa7-2f9578366b13",
                            TwoFactorEnabled = false,
                            UserName = "guest17@mail.com"
                        },
                        new
                        {
                            Id = "b5d12a7b-9012-40b4-9be4-c60edc0752f8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d5457c0a-ec54-4c8a-8996-58ead37411f5",
                            Email = "guest18@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest18@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGgbVUf2D5z4czdBwa5e5NYC7lMsM5TDNTErE/1Z7CubQQ3hcSl9eANDE6CuXts7QA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a65566f2-f23e-4a48-8351-d02e816aec17",
                            TwoFactorEnabled = false,
                            UserName = "guest18@mail.com"
                        },
                        new
                        {
                            Id = "fb95a654-d906-49b5-8247-b827c1dc0106",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a7e7047-5cc5-404f-99e8-40b26f6e1fcc",
                            Email = "guest19@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "guest19@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFXrTwDxkuLos0ln+jQBA1tPvprfn/c7iVZjWzetDCY2rJG09zWxIU5qvxYexX/fiA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "effb2556-6f07-4540-8c79-45ba2f668f8e",
                            TwoFactorEnabled = false,
                            UserName = "guest19@mail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "87b8ae22-f7bb-4a34-8305-b67d4ca8cf24",
                            RoleId = "f974cfc9-615e-40ca-9be9-7c9b73ee80be"
                        },
                        new
                        {
                            UserId = "8ba459fd-a82a-444d-8283-028b5f9cb501",
                            RoleId = "9139cbbb-2459-4edc-b1e7-5066480bc2f4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Enrollment", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Group", null)
                        .WithMany("Enrollments")
                        .HasForeignKey("GroupId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Group", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Student", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.StudentToGroupAction", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Teacher", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Topic", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Course", "Course")
                        .WithMany("Topics")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.Topic", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Course");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Course", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Group", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
