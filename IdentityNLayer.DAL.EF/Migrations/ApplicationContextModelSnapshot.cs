// <auto-generated />
using System;
using IdentityNLayer.DAL.EF.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IdentityNLayer.DAL.EF.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Super MVC",
                            Title = "ASP",
                            TopicId = 1,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Description = "Super Spring",
                            Title = "Java",
                            TopicId = 2,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Description = "Super JavaScript",
                            Title = "JavaScript",
                            TopicId = 3,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Description = "Super Python",
                            Title = "Python",
                            TopicId = 5,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityID")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserID");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FileContent")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("MethodistId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("MethodistId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.GroupLesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("LessonId");

                    b.ToTable("GroupLessons");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("FileId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Theme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("FileId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Duration = 5,
                            Name = "Lesson 1",
                            Theme = "Super Lesson 1"
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 1,
                            Duration = 5,
                            Name = "Lesson 2",
                            Theme = "Super Lesson 2"
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 1,
                            Duration = 5,
                            Name = "Lesson 3",
                            Theme = "Super Lesson 3"
                        });
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Methodist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LinkToContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Methodists");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "67021ba0-6124-4d7c-b0eb-814508e620cf",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1998, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "495eb166-2f9b-438e-8345-9991de9e5da7",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            FirstName = "admin",
                            LastName = "admin",
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMOGkGkuTLVfmlLRu1DbK59JalbUlHJj6wsnw2gqXYSFpJtLQPmmzVgPRByFFtW0Jg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "90864183-0746-4294-b688-7f560b493af3",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "5d9d0627-70d1-4a69-89f9-fe07fdeb93db",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2000, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "7e7a677f-78b2-45a2-8dd2-39b090e13ac2",
                            Email = "methodist@methodist.com",
                            EmailConfirmed = true,
                            FirstName = "methodist",
                            LastName = "methodist",
                            LockoutEnabled = false,
                            NormalizedUserName = "METHODIST@METHODIST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKlzUoLctxobxx6uSzbMJq0CJW13D/lN8JxwO3+Z5zGqaSjMSOuGUKuFupWNKHoNpQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b6e6d465-165e-4519-954c-e45061f56f2f",
                            TwoFactorEnabled = false,
                            UserName = "methodist@methodist.com"
                        },
                        new
                        {
                            Id = "6d4d1c97-ca8f-421d-b4e3-07558e0557f9",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "f87fdd6a-262f-4cc5-a960-38911e9c43d2",
                            Email = "guest1@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest1",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest1@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAED1+QzptGLbIh4q04TuA8T8gMvllotTbJD5pFGpue+d0ffNdXY/ZMxb+dZqSi9LquQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6103c668-8e52-4589-823f-8edd1857d479",
                            TwoFactorEnabled = false,
                            UserName = "guest1@mail.com"
                        },
                        new
                        {
                            Id = "e1d19c01-950c-4bcd-a6ae-a4dffc26c813",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "75635b03-4795-48b9-8a57-7fb17712b904",
                            Email = "guest2@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest2",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest2@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDRo0x5O3z5JlVjgvDLjzoiR8CjXURnDxbSKbfmk3qW0zTUQqED1buciDAZt3Q4qnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2281326f-59d5-473f-a706-483416f24129",
                            TwoFactorEnabled = false,
                            UserName = "guest2@mail.com"
                        },
                        new
                        {
                            Id = "1102992a-dbcd-4952-9f84-c6015d56aa8f",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "73563b7f-ec28-4b5d-b11f-cef1f5220d11",
                            Email = "guest3@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest3",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest3@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPL+GUWibZinlzqxIH4wG7s+1113YaK02oJgFmErSSAyr7bf9R02IfBAidM1Ccj3Pw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5f3c5fd7-713a-4236-a216-7f6751f3373e",
                            TwoFactorEnabled = false,
                            UserName = "guest3@mail.com"
                        },
                        new
                        {
                            Id = "99f6cd94-aea2-41d5-b2ff-cc40d5f4531a",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "59decaa6-18d4-48d0-b5f6-564ef6048a57",
                            Email = "guest4@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest4",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest4@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGNfzx+4hc2YrJfqVrzJzmoGzC9Lbe53lOIY4/r745dKSJ32WHSm0+B3xGUfGsfr6A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1e041a17-8766-435d-a9ef-36909a4c0f03",
                            TwoFactorEnabled = false,
                            UserName = "guest4@mail.com"
                        },
                        new
                        {
                            Id = "cde19143-c405-4ac8-a1aa-c6accc83b333",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "1a2fea3d-6240-4a14-8c03-cd1785a93321",
                            Email = "guest5@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest5",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest5@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ1l/FnjFxQ16A5KyJCv9YxLfCTHj/7+kolIX277a56T2NY1I0eZQ5KlrwdirfJryg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "15d3c137-fccc-4912-9107-7d5de0c5daa6",
                            TwoFactorEnabled = false,
                            UserName = "guest5@mail.com"
                        },
                        new
                        {
                            Id = "63d9ccc4-14ea-419c-bb35-d23a04404c19",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "99032dbf-3000-4bc8-824e-dba4e8417d16",
                            Email = "guest6@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest6",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest6@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAjCcpvJIe7p0oqXFEJ4baW7fhu6qX8Ua6NalSPCQ+dbyo1kivpBZO8tlSszn8SKOQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "07c00651-b3a7-4ad5-a8f2-a438dc1578c0",
                            TwoFactorEnabled = false,
                            UserName = "guest6@mail.com"
                        },
                        new
                        {
                            Id = "4ffb58bc-14b5-4f6f-aa0d-7c40c33361dd",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "6dd77622-8338-4439-9065-eaaee9c6d033",
                            Email = "guest7@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest7",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest7@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHHvBa8+FHTJNK23+QYrYkRBnUsEd1Wt7LfVWEKYUotMa++cDjosGOj8wfe1LBJuLA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a8d94ae5-c8c0-43a7-995b-3916605683ae",
                            TwoFactorEnabled = false,
                            UserName = "guest7@mail.com"
                        },
                        new
                        {
                            Id = "6dfe72ca-d5dd-4ed4-861a-6a13a09cc065",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "e27bf3ff-5da7-4bbf-ab8b-40e3ec63343f",
                            Email = "guest8@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest8",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest8@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEcSOv4PkfnnWvNbxhgqzfdGekAzCHiy97NCNrO5GgKZs4Xpbii3nPi8lYqTr1BbpQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e5d09280-6b88-4b5d-b978-725a076fe156",
                            TwoFactorEnabled = false,
                            UserName = "guest8@mail.com"
                        },
                        new
                        {
                            Id = "0738e39c-c751-4f85-b744-21e03846682e",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "69c1071f-854f-43dc-8eaa-4913f45dfedb",
                            Email = "guest9@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest9",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest9@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKvtyj4tG88krYdODQYIf2UVHwlz+foToMiR6wD4aEfpByO6DkqaMNncophSZRmMYQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "469d926a-f8ce-4b81-b96d-cfe205d9be10",
                            TwoFactorEnabled = false,
                            UserName = "guest9@mail.com"
                        },
                        new
                        {
                            Id = "1a34d9f7-8256-4c36-85d7-850ae44eb95b",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "0f0e3c5a-42ba-436d-b49a-2a03b76c7be8",
                            Email = "guest10@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest10",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest10@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBtvIjYq0Wmihkjm7WW881p5pvvhCFE/SmmZML5S+qO4WRazq3viuqUwARiaTBHh8w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dfb7eae2-6edc-41f9-b6db-25329b04735e",
                            TwoFactorEnabled = false,
                            UserName = "guest10@mail.com"
                        },
                        new
                        {
                            Id = "8d710781-8172-411d-ae67-355192870b93",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "33716264-f4a9-4b30-8730-68baf7e0c46e",
                            Email = "guest11@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest11",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest11@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELT28vdJRRPSOjRAvfpy/CktXfmKeOuA/RtyG1fz6ruqHkqCwZQJSzXpmeFSkBwxyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "447e1675-3edd-4dbb-b671-2e22e1f0addb",
                            TwoFactorEnabled = false,
                            UserName = "guest11@mail.com"
                        },
                        new
                        {
                            Id = "ffbe500e-7aa6-45f6-8ffe-795486799270",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "47f9189a-9378-4da2-9520-f9698800047b",
                            Email = "guest12@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest12",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest12@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECKb+ZPpxUDzd9GtL5Y7B3Sc87olB8IGkNMmgT1B7le2xh1uDZ3f8VfI72hPmiJkNg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e9eca0ef-7f90-4e99-bad5-6e48ed76fef8",
                            TwoFactorEnabled = false,
                            UserName = "guest12@mail.com"
                        },
                        new
                        {
                            Id = "9f981c51-1b80-49e7-8031-9815138cab47",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "7391446d-9fe2-47bb-b893-7a67691eb71c",
                            Email = "guest13@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest13",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest13@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPqd+7O7R/nhqT3krVAP/oyVBI/TjwEw3MXjGP1BLPdJVOe4YQ1Oxwtc4nwByaRQIg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1a650ab5-fac6-4a2a-b81b-a0e360598dc0",
                            TwoFactorEnabled = false,
                            UserName = "guest13@mail.com"
                        },
                        new
                        {
                            Id = "25ff1f64-38fc-4117-b6cd-d703d905e164",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "3941f0e5-b8c0-4f4c-a40f-e51595d17a28",
                            Email = "guest14@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest14",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest14@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMC2Gh7OVQZocDpujkqjl+7lrU5ZU5ZiGtpS7gsYJ8SmQu0uKSbScXfI/NP1xn5ebQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ba264cd0-ec1e-4e2e-967b-56b84ca0cc95",
                            TwoFactorEnabled = false,
                            UserName = "guest14@mail.com"
                        },
                        new
                        {
                            Id = "e0c0a58b-3054-4c58-b570-4787afb43745",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "dca606c5-37e6-4129-99ce-fe776c7ef2f7",
                            Email = "guest15@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest15",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest15@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFz6W+olONeeg5dwP0OlZjfQeBQfENjfD7Qwf1qBWAoHtFqH2MZGv3nhydJZHHtExQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0d369d29-c4ad-43f8-831e-d87d6ba9a423",
                            TwoFactorEnabled = false,
                            UserName = "guest15@mail.com"
                        },
                        new
                        {
                            Id = "a73476e3-a381-494e-bd7e-49836220a2d3",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "8140cf11-adc0-44dc-9018-30cd16fbd81e",
                            Email = "guest16@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest16",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest16@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPcrW9po1hHX6RuVesvETR4vYvxvxrAMd7Kzj8YIFmQPKtmeeiskeXlyEtwT9UalwA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8a26faf6-58de-4a22-ac3e-e040c1276183",
                            TwoFactorEnabled = false,
                            UserName = "guest16@mail.com"
                        },
                        new
                        {
                            Id = "2977a779-46d5-4ac3-9eef-f377237a2b40",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "6b9f2466-6d07-4a1f-8c58-a378f2586fb7",
                            Email = "guest17@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest17",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest17@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMi0Zi3dCh3oFJHH3ocPoosdg4WjATBPd9R7LnTgPl5xNEZ2i1fBclKgGqh1KcOtNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b9706914-dc4a-44b7-9cda-767305b93df0",
                            TwoFactorEnabled = false,
                            UserName = "guest17@mail.com"
                        },
                        new
                        {
                            Id = "e25c565d-4bf6-4671-9ecf-b24c283d78dc",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "93b704d3-1de7-484b-ac0b-4331eace5805",
                            Email = "guest18@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest18",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest18@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPI1fwRkpNNagHdOa7RcnOrD7QNGm6s5YFgWvvWhfSu/0ZYHH5S1MCGgS2uaBtCnUg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ee1c01a9-facd-4f01-9692-de7671a0444b",
                            TwoFactorEnabled = false,
                            UserName = "guest18@mail.com"
                        },
                        new
                        {
                            Id = "8755e974-167a-411b-8f54-cb209194260b",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "ebdee0a9-13e3-44ae-9b3e-4178bab626be",
                            Email = "guest19@mail.com",
                            EmailConfirmed = true,
                            FirstName = "guest19",
                            LastName = "standart",
                            LockoutEnabled = false,
                            NormalizedUserName = "guest19@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKItvtClUPyWJCqduRNj5IJZtFGRKo5xo75eALUwq8r36XzrWZcahX+Fb3ysKhh3tw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d48fd935-4be8-4385-a447-af41a2c24bc8",
                            TwoFactorEnabled = false,
                            UserName = "guest19@mail.com"
                        });
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.StudentMark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("LessonId")
                        .HasColumnType("int");

                    b.Property<int?>("Mark")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentMarks");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.StudentToGroupAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentToGroupActions");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkToProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Super MVC",
                            Title = ".NET"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Super Spring",
                            Title = "Spring"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Super ReactJS",
                            Title = "ReactJS"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Super AngularJS",
                            Title = "AngularJS"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Super PythonBackend",
                            Title = "PythonBackend"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "519c1fa8-725c-4a21-99e4-5cea7da2b861",
                            ConcurrencyStamp = "2621e69d-3ea4-4f80-bdd4-32b0c423ca92",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "62fd29f0-8e12-450f-8407-8aba848f8b60",
                            ConcurrencyStamp = "dcbbfd35-2d45-4ded-9ce1-0502b9718863",
                            Name = "Methodist",
                            NormalizedName = "METHODIST"
                        },
                        new
                        {
                            Id = "cd9d903a-5452-4861-a470-005cac6aa06d",
                            ConcurrencyStamp = "d5724a29-2eb2-45c6-9473-19bdeb8ce021",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "6497be4a-3bb6-4284-be8c-1a27a507c000",
                            ConcurrencyStamp = "8dc28c10-ef6a-4658-b429-e2c425fa59c5",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "67021ba0-6124-4d7c-b0eb-814508e620cf",
                            RoleId = "519c1fa8-725c-4a21-99e4-5cea7da2b861"
                        },
                        new
                        {
                            UserId = "5d9d0627-70d1-4a69-89f9-fe07fdeb93db",
                            RoleId = "62fd29f0-8e12-450f-8407-8aba848f8b60"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Course", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Enrollment", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Group", null)
                        .WithMany("Enrollments")
                        .HasForeignKey("GroupId");

                    b.HasOne("IdentityNLayer.Core.Entities.Person", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Group", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.Methodist", "Methodist")
                        .WithMany()
                        .HasForeignKey("MethodistId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IdentityNLayer.Core.Entities.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");

                    b.Navigation("Course");

                    b.Navigation("Methodist");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.GroupLesson", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Lesson", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId");

                    b.Navigation("Course");

                    b.Navigation("File");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Methodist", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Person", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Student", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Person", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.StudentMark", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("IdentityNLayer.Core.Entities.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId");

                    b.HasOne("IdentityNLayer.Core.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.StudentToGroupAction", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Teacher", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Person", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Topic", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Topic", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Course", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Group", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
