// <auto-generated />
using System;
using IdentityNLayer.DAL.EF.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IdentityNLayer.DAL.EF.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210825090452_FirstData")]
    partial class FirstData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Program")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Super MVC",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "ASP",
                            TopicId = 1,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Description = "Super Spring",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Java",
                            TopicId = 2,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityID")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserID");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(2005, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Oleg",
                            LastName = "Kizz",
                            Type = 0,
                            UserId = "c9fcee5b-40fa-4f54-bb53-b71a28477968"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(2006, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Vova",
                            LastName = "Braslav",
                            Type = 1,
                            UserId = "003048f9-f13d-4b4f-90b0-f5c16af3683d"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(2005, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Nikita",
                            LastName = "Chebur",
                            Type = 2,
                            UserId = "70b88c20-e3fd-40c2-9d78-0c9cb23ef243"
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(2005, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mikola",
                            LastName = "Cool",
                            Type = 0,
                            UserId = "0dc8eca7-57b8-4cfe-9678-1d735982c75e"
                        },
                        new
                        {
                            Id = 5,
                            BirthDate = new DateTime(2005, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Vovka",
                            LastName = "Sabur",
                            Type = 2,
                            UserId = "5be4fdab-8b48-448e-a518-d3dd6b83817a"
                        });
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.StudentToGroupAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentToGroupActions");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkToProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "Super Teacher",
                            BirthDate = new DateTime(1985, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Teach",
                            LastName = "First",
                            UserId = "61f255f2-f23b-4298-8920-6fb8954acd1e"
                        },
                        new
                        {
                            Id = 2,
                            Bio = "Super Teacher",
                            BirthDate = new DateTime(1992, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Teach",
                            LastName = "Second",
                            UserId = "9318e043-d2dc-40b3-bb80-2575e00285d1"
                        });
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Super MVC",
                            Title = ".NET"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Super Spring",
                            Title = "Spring"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "7b487486-9a02-4c2b-bd75-744bb38d0ea1",
                            ConcurrencyStamp = "7b2de314-c4e1-4733-95c7-d382c77c5463",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "b1b124db-2749-4f5b-aff5-7de8d576bab8",
                            ConcurrencyStamp = "4c6940b3-413b-4235-ac13-47b2338824e4",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "20787328-044d-495f-9aa4-ea4983bf795f",
                            ConcurrencyStamp = "95a4af52-262e-4e93-b8a9-e775ddb62083",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "f1c6bcea-bee6-4da5-a011-d48b5a7d17ca",
                            ConcurrencyStamp = "516ab371-902f-4fb4-9bd4-a479310ea1e9",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "03c25264-ebad-486b-b67b-8ea32106fe1c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6829fe48-4002-4601-a383-bfc2c88af8e8",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEG6IBFEVjW2yw6FQ0lzo0NREeypiUoTyWdACKL6wRX+C0K6EMSVUcuFAvWqFDq49/Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "303368bb-ada2-44bf-874f-a60b2b0ebb1f",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "ff45eeed-a12f-4611-9459-da96021468ab",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c58283de-a1b4-4740-adac-337a321a53ed",
                            Email = "manager@manager.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "MANAGER@MANAGER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEADqikUrlzn/YGhQ9PSAp3474woRi6yflu2xlwCnNrlYkDgk9fsyBZM3h0EZjRNbTQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ba2385af-2b59-4738-b18d-e6136338f3c6",
                            TwoFactorEnabled = false,
                            UserName = "manager@manager.com"
                        },
                        new
                        {
                            Id = "c9fcee5b-40fa-4f54-bb53-b71a28477968",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ecc7ba6f-7a65-47d5-9e92-9643c6815edc",
                            Email = "studentfirst@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "STUDENTFIRST@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELXuQGCbaO3IHUfmgjMU6r/aDjOU8FdfitGeKbT4ib7sN4t4HQILwb1f/Puec3VqKw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "036ae482-1cff-45fd-bfac-633c9bce20b9",
                            TwoFactorEnabled = false,
                            UserName = "studentfirst@mail.com"
                        },
                        new
                        {
                            Id = "003048f9-f13d-4b4f-90b0-f5c16af3683d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6481ed4a-e648-455d-b12b-34ece3a594b3",
                            Email = "studentsecond@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "STUDENTSECOND@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ5T7dVbjrNoUSGliqmejRv0Ve+91oFydsxom30ttZU13gjFIQL4EoottWMdZWxESg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e967fc90-febb-4063-b669-6f8fe160d932",
                            TwoFactorEnabled = false,
                            UserName = "studentsecond@mail.com"
                        },
                        new
                        {
                            Id = "70b88c20-e3fd-40c2-9d78-0c9cb23ef243",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "edb5ca87-c810-41c3-9086-e183e192702e",
                            Email = "studentthird@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "STUDENTTHIRD@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIGekxaJ5ofp/St1ZPPDMWzmtFE+xg3RFq1l8wEf2+C7wn3LA9Ng5MGLIFJbipvCpw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "260dbbc5-caf7-464c-adbc-ed020bd8bd18",
                            TwoFactorEnabled = false,
                            UserName = "studentthird@mail.com"
                        },
                        new
                        {
                            Id = "61f255f2-f23b-4298-8920-6fb8954acd1e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "075bb0dc-9ee4-4f37-b12c-6aadc3f8ecc3",
                            Email = "teacherfirst@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "TEACHERFIRST@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFwkJGgi/WFG5vt1nlqx2/ubWIr2afv0rQliBXtbeNbXq0lnYtWZCapaIsGMk9oh/w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9f31c5f2-fc99-4883-a7f1-77164ea75cfc",
                            TwoFactorEnabled = false,
                            UserName = "teacherfirst@mail.com"
                        },
                        new
                        {
                            Id = "9318e043-d2dc-40b3-bb80-2575e00285d1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8db583f1-9564-4ad2-8c92-99af2ccc05d5",
                            Email = "teachersecond@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "TEACHERSECOND@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELlkHb0z/uduEtLwUER5BZupLO5rK8VqcPVICsJTbpntMHS5JBQQZ72m6nOma+BEtw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ef8b5c91-8d06-48fa-9392-ccff2449e9f3",
                            TwoFactorEnabled = false,
                            UserName = "teachersecond@mail.com"
                        },
                        new
                        {
                            Id = "0dc8eca7-57b8-4cfe-9678-1d735982c75e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd3e93d1-8cc4-49db-b270-8cec245c9bca",
                            Email = "studentfourth@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "STUDENTFOURTH@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEaYTVwvWNbc3iTAqPs+Sn6Ik3RbSzSgUUdL3a7yoPdt1SywOaV/JVKvv3vg2vx4uw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e95588cc-9666-4965-93ca-7b14e44fe272",
                            TwoFactorEnabled = false,
                            UserName = "studentfourth@mail.com"
                        },
                        new
                        {
                            Id = "5be4fdab-8b48-448e-a518-d3dd6b83817a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "14733803-2f5d-4e05-bc81-1ffae4e662d5",
                            Email = "studentfifth@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "STUDENTFIFTH@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECJYL5ts/PbUTZYzcQzBwabwFZ9QFPDXwyvFmWOEhcwuQuht59tlEhoHQd+1gwk9PA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a97146d8-944b-4d4d-9bb6-cda0f2fcf208",
                            TwoFactorEnabled = false,
                            UserName = "studentfifth@mail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "03c25264-ebad-486b-b67b-8ea32106fe1c",
                            RoleId = "7b487486-9a02-4c2b-bd75-744bb38d0ea1"
                        },
                        new
                        {
                            UserId = "ff45eeed-a12f-4611-9459-da96021468ab",
                            RoleId = "b1b124db-2749-4f5b-aff5-7de8d576bab8"
                        },
                        new
                        {
                            UserId = "c9fcee5b-40fa-4f54-bb53-b71a28477968",
                            RoleId = "20787328-044d-495f-9aa4-ea4983bf795f"
                        },
                        new
                        {
                            UserId = "003048f9-f13d-4b4f-90b0-f5c16af3683d",
                            RoleId = "20787328-044d-495f-9aa4-ea4983bf795f"
                        },
                        new
                        {
                            UserId = "70b88c20-e3fd-40c2-9d78-0c9cb23ef243",
                            RoleId = "20787328-044d-495f-9aa4-ea4983bf795f"
                        },
                        new
                        {
                            UserId = "61f255f2-f23b-4298-8920-6fb8954acd1e",
                            RoleId = "f1c6bcea-bee6-4da5-a011-d48b5a7d17ca"
                        },
                        new
                        {
                            UserId = "9318e043-d2dc-40b3-bb80-2575e00285d1",
                            RoleId = "f1c6bcea-bee6-4da5-a011-d48b5a7d17ca"
                        },
                        new
                        {
                            UserId = "0dc8eca7-57b8-4cfe-9678-1d735982c75e",
                            RoleId = "20787328-044d-495f-9aa4-ea4983bf795f"
                        },
                        new
                        {
                            UserId = "5be4fdab-8b48-448e-a518-d3dd6b83817a",
                            RoleId = "20787328-044d-495f-9aa4-ea4983bf795f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Course", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Enrollment", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Group", null)
                        .WithMany("Enrollments")
                        .HasForeignKey("GroupId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Group", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Student", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.StudentToGroupAction", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityNLayer.Core.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Teacher", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Topic", b =>
                {
                    b.HasOne("IdentityNLayer.Core.Entities.Topic", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdentityNLayer.Core.Entities.Group", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
