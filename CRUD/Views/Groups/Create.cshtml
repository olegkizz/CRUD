@model IdentityNLayer.Models.GroupModel
@using IdentityNLayer.Core.Entities GroupStatus;
@using System.Linq;
@inject IdentityNLayer.BLL.Interfaces.ICourseService courseService
@inject IdentityNLayer.BLL.Interfaces.IGroupService groupService
@using AutoMapper
@inject IMapper mapper
@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Group</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="CourseId" />
            <div class="form-group">
                <label asp-for="Number" class="control-label"></label>
                <input asp-for="Number" class="form-control" />
                <span asp-validation-for="Number" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Status" class="control-label"></label>
                <select asp-for="Status" asp-items="Html.GetEnumSelectList<GroupStatus>()"></select>
                <span asp-validation-for="Status" class="text-danger"></span>
            </div>
            @if (groupService.GetCurrentTeacher(Model.Id) == null)
            {
                <div class="form-group">
                    <label class="control-label">TeacherRequests</label>
                    @if (courseService.GetTeacherRequests(Model.CourseId) != null)
                    {
                        @Html.DropDownListFor(model => model.TeacherId,
                 new SelectList(mapper.Map<IEnumerable<TeacherModel>>(courseService.GetTeacherRequests(Model.CourseId)), "Id", "Name"),
                            "Teacher is not selected...")
                    }
                    else
                    {
                        <span>No Teacher Requests</span>
                    }
                </div>
            }
            <div class="form-group">
                <label asp-for="StudentRequests" class="control-label"></label>
                @{
                    var studentRequests = courseService.GetStudentRequests(Convert.ToInt32(Model.CourseId)).ToList();
                    Model.StudentRequests = new();
                    for (int i = 0; i < studentRequests.Count(); ++i)
                    {
                        Model.StudentRequests.Add(new StudentRequestsModel()
                        {
                            UserId = studentRequests[i].UserID,
                            UserName = studentRequests[i].User.UserName,
                            Applied = false
                        });
                        <input type="hidden" asp-for="@Model.StudentRequests[i].UserId" />
                        <input type="hidden" asp-for="@Model.StudentRequests[i].UserName" />
                        @Html.CheckBoxFor(m => m.StudentRequests[i].Applied)
                        @Model.StudentRequests[i].UserName
                    }
                    if (studentRequests.Count() == 0)
                    {
                        <span>No Student Requests</span>
                    }
                }

            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
